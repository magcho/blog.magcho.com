{"expireTime":9007200860071785000,"key":"transformer-remark-markdown-html-c837e00400d65f71f34ce10eb9b62aab-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjs-titlegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-prismjs-","val":"<p>完全にメモ書きになってるので Evernote にでも書けよって感じ。</p>\n<p>Docker はコンテナ型仮想化システムで、必要な時に必要なだけコンテナを作り、終わったら捨てる。いわば使い捨てだ。でも、消えて欲しくないデータを扱う事もあるだろう。そんな話。</p>\n<p>自分はインフラエンジニアではないし、Docker でホストの環境弄らずに開発環境作りたかったから始めたっていう理由</p>\n<p>Docker コンテナは使い捨てるもの → 残したいファイルはコンテの外に保存しておこうっていう考えらしい。</p>\n<h2>Docker の volume にも色々ある</h2>\n<ul>\n<li>docker run の-v オプション\n<code class=\"language-text\">$ Docker run -v /hoge centos:latest</code>\ncentos の latest(最新版)を起動するコマンドである。この時-v オプションを使ってコンテナ内に/hoge という名前のシンボリックリングを作成し、フォルダの実体は/var/lib/docker/volumes/{ランダムな英数字}/_data/にある。このフォルダは docker がコンテナと連動させて管理しているため、docker コンテナを消せばこのフォルダも消えます。\n** 説明のため、コマンドは一部省略しています **</li>\n</ul>\n<p>この時、内部では 1. ホストに実体のフォルダを作る 2. イメージからコンテナをつくり動かす 3. ホストのフォルダへのリンクをコンテナに作る(上書く)</p>\n<p>ってイメージらしい。</p>\n<ul>\n<li>\n<p>ホストのフォルダとコンテナのフォルダを同期する</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker run -v {ホストのフォルダ(実体)}:{コンテナ内のリンク名} centos:latest</code></pre></div>\n<p>このコマンドでホストのフォルダへのシンボリックリンクをコンテナ作成時に貼る。こうすれば、コンテナの設定を変えてリビルドしてもファイルは消えずに残る。\nまた、ホストにファイルがあるのでホストでエディターを開き、コンテナで開発環境を揃え実行できるので環境のバージョンを変えるのもイメージを差し替えるだけだし、ソースをホスト側で git 管理する事もできる。</p>\n</li>\n</ul>\n<h2>後記</h2>\n<p>dockerfile や docker-compose にも同様の機能があるので、もう少し検証したい</p>"}