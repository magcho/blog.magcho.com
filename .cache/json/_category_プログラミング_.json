{"data":{"site":{"siteMetadata":{"title":"magchoの雑記","description":"magchoの日記とか思いつきを記録するブログ"}},"allMarkdownRemark":{"totalCount":17,"edges":[{"node":{"excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。 keymap.cにテンキーレイヤーを追加する レイヤー定義はに書き込みます。 レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lower…","fields":{"slug":"/2020/6/lily58-add-layer/"},"frontmatter":{"title":"Lily58にレイヤーを追加する","tags":["lily58","自作キーボード"],"date":"06/20"}}},{"node":{"excerpt":"demo asciicast gitignoreを言語とに自動生成してくれるサービスはいくつかありますが、わざわざwebサイトを開くのも面倒です。\n幸いなことにgitignore.ioがapiを提供してくれています、これを利用してgitにサブコマンドを追加しましょう。 ついでに.gitignoreを上書き・追記の確認・gitignore.ioにテンプレートが存在しない場合はエラーを表示などもあると親切ですね。shにするとこんな感じに。 .gitconfigに書くとときには全体を関数にする・ダブルクォーテーションをエスケープ・が使えないのでに差し替えなどをすると以下になります。 書いていて気づいたんですが、#はエスケープせずに動きますね。 使い方","fields":{"slug":"/2020/6/gitignore/"},"frontmatter":{"title":".gitignoreを自動生成するサブコマンドを作ろう","tags":["git"],"date":"06/14"}}},{"node":{"excerpt":"gulp-sharp で画像のリサイズをしたい時にできなかったので自分でそれっぽいのを書いた。 フロントエンドで画像を扱う時にsrcディレクトリには元の大きさの画像を用意してdistディレクトリには適切なサイズまで小さくして公開する運用をしている。 自分は欲しい大きさにresizeしてからoptimiseをしています、gulpでのresizeで一番npmでダウンロード数が多いのはgulp-image-resizeです。このライブラリはGraphicsMagick か ImageMagickまたはその両方を必要とします。CIでサイトをビルドする時にこれらがインストールされていないときは自分でapt等でインストールをする必要がありますが、ciの制約でインストールができなかったのでsharpを使ってresizeさせたかった。 探すとgulp-sharp…","fields":{"slug":"/2020/5/gulp-sharp/"},"frontmatter":{"title":"GulpでSharpを使って画像のリサイズをする","tags":["Gulp"],"date":"05/04"}}},{"node":{"excerpt":"キー入力が下手なのでバックスペースを連打しがちなのですがバックスペースキーはキーボード上では遥か右上にあります。これが原因で右手首を痛めたことも。入力精度を上げろという話なのですが出来るならもうしてます。 また、以外と日本語入力をしていると使いがちな「ー」伸ばし棒も近くに欲しいものです。  今回はにbackspace・にハイフンを割り当てます。 Ctrlキー Ctrlキー含め装飾キーには様々なキーバインドが割り当てられています。一般的にはにはreturn・にはbackspaceなど色々あります。zsh/bashなどのshellやターミナルのキーバインドに設定されていることが多いです。macではに行末まで削除があったりと気が利いています。 qmk firmwareではraise/lower…","fields":{"slug":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/"},"frontmatter":{"title":"qmk firmwareでctrlとの同時押しをカスタマイズする","tags":["qmk firmware","自作キーボード"],"date":"04/08"}}},{"node":{"excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"},"frontmatter":{"title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","tags":["go","GitHub Actions","dotz"],"date":"04/06"}}},{"node":{"excerpt":"Emacsのパッケージマネージャーのuse-package.elにはパッケージインストールの他に任意のタイミングで評価させるキーワードというものがありますが、自分はこれをよく分からず使っているので調べてまとめます。 実行タイミング 評価の順番はこうなります パッケージ名の実在確認    パッケージをロード パッケージをロード  インストールするパッケージの設定を記述するためのキーワードです。 :preface 条件分岐キーワードを同時に使用していた時でも、条件分岐よりも先に評価されます。つまり、指定したパッケージ名が実在するならば真っ先に必ず評価してくれます。 :init パッケージが読み込まれる前に評価されます。遅延キーワードの影響を受けません。 :config 当該のパッケージが読み込まれた後に評価されます。initに比べ、config…","fields":{"slug":"/2019/12/use-package/"},"frontmatter":{"title":"use-packageについてまとめる","tags":["emacs","use-package"],"date":"12/02"}}},{"node":{"excerpt":"google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。 さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。 ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。 この恐竜はネットワークに問題がある時に加えて、chromeでにアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。 ちなみにネットワークエラーの時には小さいdinoくんですがで表示したdino…","fields":{"slug":"/2019/11/dino/"},"frontmatter":{"title":"Chromeのティラノサウルスについて調べた","tags":["Chrome","OSS"],"date":"11/22"}}},{"node":{"excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","fields":{"slug":"/2019/09/dotz/"},"frontmatter":{"title":"dotfilesを管理するツールを作った","tags":["golang","dotz","macOS"],"date":"09/20"}}},{"node":{"excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。 \n\t なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","fields":{"slug":"/2019/08/tmux-emacs-underline/"},"frontmatter":{"title":"tmux上のemacsで下線が表示されなかった話","tags":["emacs","tmux"],"date":"08/21"}}},{"node":{"excerpt":"Cask に追加してみる homebrew を更新し、作業中は自動更新を止める まずで更新をかけておきます、これで Cask 含め brew 本体も更新されます。 次に、homebrew は Cask を自動更新する仕様なので作業中はこれを止めておきます。 環境変数なのでターミナルを開き直したあとや、別のターミナルには効きませんのでご注意を。 Cask に追加したいアプリケーションをインストールしておく 今までと同じようにブラウザでインストーラーなどをダウンロードし、インストールします。後々使うのでダウンロードしたファイルを消さないようにしましょう。 github 上でhomebrew-caskを fork する local 上の homebrew ディレクトリの git に fork したリポジトリを追加する Cask…","fields":{"slug":"/2019/01/homebrew-cask-add/"},"frontmatter":{"title":"homebrew-caskにないアプリは自分で追加しよう","tags":["homebrew"],"date":"08/20"}}},{"node":{"excerpt":"今日ターミナルを起動すると と表示されるようになった。とりあえず perl を最新にしてみようと plenv をインストール\nhttps://github.com/tokuhirom/plenv#homebrew-on-mac-os-x\n公式の説明どうりに .bachrc に追記 最新版をダウンロード、インストール パッケージマネージャーもインストール(pip 的なやつ) そして local/lib.pm をインストール","fields":{"slug":"/macのターミナル起動時に怒られるようになった話/"},"frontmatter":{"title":"macのターミナル起動時に怒られるようになった話","tags":["mac"],"date":"06/05"}}},{"node":{"excerpt":"情報が古く、執筆時の Netlifty の UI 等が変わっています。ご注意を 事の発端 IOS 11 ｷﾀ ━(ﾟ ∀ ﾟ)━! 　 Safari からカメラの映像が取得できる！　これでアプリではなくブラウザから AR できるようになった！と喜んでいたら、このカメラの api は https じゃないとセキュリティ的な問題で動かないのである。 Github pages で独自ドメインでホスティングしているサイトを HTTPS にしたいけどお金はない。 すでに導入レポは検索すればいくつも見つかるものの、どうも日本語の情報が少ないのでメモすることにした。 使ったもの Github Netlify お名前.com 手順 お名前.com でドメインを取得します。 Github に公開するサイトのファイル一式を push しておきます。 一度 Github pages…","fields":{"slug":"/netlifyとgithubで独自ドメインのサイトをhttps化したメモ/"},"frontmatter":{"title":"NetlifyとGithubで独自ドメインのサイトをHTTPS化したメモ","tags":["Netlify"],"date":"10/15"}}},{"node":{"excerpt":"内容 DockerHub の公式の PHP イメージを使っていて、mod_rewite したい人向けのお話です。結論だけ知りたい人は読み飛ばしてね。 事の発端 僕自身が立ち上げた web サービスではもともと URL がという感じでとてもダサかったので、かっこよくしたかった。WordPress などではパーマリンクと呼ばれ URL がイカした感じになっているので、僕も方法をパクった。\n調べると apache 側の設定で mod_rewrite を使うとアクセス時に URL を記述したルールに基づいて置換してくれるらしい。 僕の web サービスではアクセスを全て index.php で受け、get パラメータで動作を変化させている、pukiwiki とか？の設計をパクったはず。動作ルールは以下  cmd view 記事の表示、page で記事を指定 edit 記事の編集、page…","fields":{"slug":"/dockerで立ち上げたwebサーバでmod_rewriteしたかった話/"},"frontmatter":{"title":"Dockerで立ち上げたwebサーバでmod_rewriteしたかった話","tags":["Docker"],"date":"08/11"}}},{"node":{"excerpt":"完全にメモ書きになってるので Evernote にでも書けよって感じ。 Docker はコンテナ型仮想化システムで、必要な時に必要なだけコンテナを作り、終わったら捨てる。いわば使い捨てだ。でも、消えて欲しくないデータを扱う事もあるだろう。そんな話。 自分はインフラエンジニアではないし、Docker でホストの環境弄らずに開発環境作りたかったから始めたっていう理由 Docker コンテナは使い捨てるもの → 残したいファイルはコンテの外に保存しておこうっていう考えらしい。 Docker の volume にも色々ある docker run の-v オプション\n\ncentos の latest(最新版)を起動するコマンドである。この時-v オプションを使ってコンテナ内に/hoge という名前のシンボリックリングを作成し、フォルダの実体は/var/lib/docker/volumes…","fields":{"slug":"/docker-volumeを調べたメモ/"},"frontmatter":{"title":"Docker volumeを調べたメモ","tags":["Docker"],"date":"01/06"}}},{"node":{"excerpt":"自分用のメモ記事なので、参考程度にどうぞ。 環境 MacBookAir macOS Sierra 10.12.2 homebrew 1.1.5 homebrew-cask 1.1.5 mas 1.3.1 mackup 0.8.15 準備編 １. 必要なファイルを外部のストレージにコピー home ディレクトリをそのままコピーしてしまえばある程度は安心 プッシュしていない Git プロジェクトはプロジェクトごとコピーしておけばブランチ構造ごとコピーできる VirtualBox のエクスポートツールでバックアップしてもいいし、面倒ならフォルダごとコピーして*.vbox ファイルをあとでインポートすれば OK ２. Dropbox をインストールし同期できるように設定しておく インストール済みならばそれで OK…","fields":{"slug":"/mbaのserriaをクリーンインストールした時の手順メモ/"},"frontmatter":{"title":"MBAのSerriaをクリーンインストールした時の手順メモ","tags":["mac"],"date":"12/30"}}},{"node":{"excerpt":"状況説明 かなり前から homebrew cask を使うと。 こんなのが出てきていた。「cask のバージョンアップでアプリが配置されるディレクトリの場所が変わったから前の場所に置いてたアプリ新しいとこに移動してくれ」っていう話だった気がする、筆者は面倒だから移動しなくても使えるからやっていなかったが、docker がうまくインストールできないので今更対応した。\nやることは簡単、コンソールに書いてあるURLに書いている通りに進めるだけだが、しかし今回 Thunderbird…","fields":{"slug":"/homebrew-caskで特定のアプリがインストールできなくなった話/"},"frontmatter":{"title":"Homebrew Caskで特定のアプリがインストールできなくなった話","tags":["Homebrew"],"date":"12/03"}}},{"node":{"excerpt":"事の発端 学校で課題研究の授業があって数人でグループを組んで自然言語処理の研究をしていたところ、VPS が必要になってどうしようと思ってたら Github education の中に AWS あったなーと思ってセットアップしてたらクレジットカード番号必須で詰んだ。\nそんなこんなして、解決できたのでここにメモしておく。 高校生とクレカ 基本的に高校生はクレジットカードが作れない。クレジットカード会社の規定なのだからしょうがない。なら代わりになるものを使えばいいじゃないという考え。 デビッドカードを作る 日本の銀行などでは１５歳以上（中学生を除く）でデビッドカードが作れる場合がある、このカードがあればクレジットカード同様に AWS…","fields":{"slug":"/awsの学割は高校生に優しくない/"},"frontmatter":{"title":"AWSの学割は高校生に優しくない","tags":["AWS"],"date":"08/20"}}}]}},"pageContext":{"categoryName":"プログラミング","siteTagsList":[{"fieldValue":"AWS","edges":[{"node":{"id":"a41857b0-1987-58b5-bcf8-d4fefeaa077e","excerpt":"事の発端 学校で課題研究の授業があって数人でグループを組んで自然言語処理の研究をしていたところ、VPS が必要になってどうしようと思ってたら Github education の中に AWS あったなーと思ってセットアップしてたらクレジットカード番号必須で詰んだ。\nそんなこんなして、解決できたのでここにメモしておく。 高校生とクレカ 基本的に高校生はクレジットカードが作れない。クレジットカード会社の規定なのだからしょうがない。なら代わりになるものを使えばいいじゃないという考え。 デビッドカードを作る 日本の銀行などでは１５歳以上（中学生を除く）でデビッドカードが作れる場合がある、このカードがあればクレジットカード同様に AWS…","frontmatter":{"date":"08/20","title":"AWSの学割は高校生に優しくない","category":"プログラミング","tags":["AWS"]},"fields":{"slug":"/awsの学割は高校生に優しくない/"}}}]},{"fieldValue":"Apple Watch","edges":[{"node":{"id":"cf86ff6d-8f3a-5ae5-8b9c-af32bf670f73","excerpt":"先日 Apple watch のシリーズ 3 の 42mm モデルを買いました。ほんとは paypay のキャッシュバックキャンペーンで買いたかったんですが、忙しくて買い損ねてしまった。 スマートウォッチを買うのは初めてではなくて、5 月ぐらいから amazon で売ってる 3,000 円ぐらいの中国のヘルスケアバンドみたいなやつを買ってつけてました。iPhone の通知を振動とディスプレイで表示してくれるのでとても便利です。自分はお仕事柄暗くて大音量の音が鳴っている空間にいることがあるのでポケットにいれたスマホの通知に気が付きません。さらにスマートウォッチならバックライトがついてたり、有機 EL でディスプレイが光るので暗くても表示が見えて良きです。 そして、apple watch に買い換えてからなんですが、以前のスマートウォッチに比べて画面が大きいですし、厚みが 5mm…","frontmatter":{"date":"01/20","title":"Apple watchを買った","category":"日記","tags":["Apple Watch"]},"fields":{"slug":"/2019/01/apple-watch/"}}}]},{"fieldValue":"Arduino","edges":[{"node":{"id":"67e3ecb0-ad9f-5d5b-8155-d18e05f48f21","excerpt":"買ったやつ http://amzn.asia/b5Kk31r インストールしたドライバー http://www.wch.cn/download/CH341SER_MAC_ZIP.html","frontmatter":{"date":"08/16","title":"Arduino互換品のドライバーメモ","category":"電子工作","tags":["Arduino"]},"fields":{"slug":"/arduino互換品のドライバーメモ/"}}}]},{"fieldValue":"Art-Net","edges":[{"node":{"id":"92b2a3f0-68e1-541b-9eb6-d2910d7496d1","excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","frontmatter":{"date":"10/13","title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"]},"fields":{"slug":"/2018/10/olaについて/"}}}]},{"fieldValue":"Chrome","edges":[{"node":{"id":"0a0afd3e-2456-5f07-93e2-303279c98d09","excerpt":"google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。 さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。 ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。 この恐竜はネットワークに問題がある時に加えて、chromeでにアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。 ちなみにネットワークエラーの時には小さいdinoくんですがで表示したdino…","frontmatter":{"date":"11/22","title":"Chromeのティラノサウルスについて調べた","category":"プログラミング","tags":["Chrome","OSS"]},"fields":{"slug":"/2019/11/dino/"}}}]},{"fieldValue":"DMX512","edges":[{"node":{"id":"92b2a3f0-68e1-541b-9eb6-d2910d7496d1","excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","frontmatter":{"date":"10/13","title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"]},"fields":{"slug":"/2018/10/olaについて/"}}},{"node":{"id":"d0ed223c-d994-5dbe-9470-da3e431c6133","excerpt":"DMXSerial 使っただけ。この方法だと HardwareSerial を使うので、スケッチ書き込み時に TX,RX からピンを抜いておかないと書き込みエラーが出たりするので、組み込みで半田付けしてからスケッチ修正できない。ムムム  https://qiita.com/loveandsheep/items/e1295ec9ce589","frontmatter":{"date":"01/05","title":"ArduinoでDMXを受ける","category":"舞台技術","tags":["DMX512"]},"fields":{"slug":"/arduinoでdmxを受ける/"}}},{"node":{"id":"3246b007-c512-5919-8921-2c87fd5af806","excerpt":"部品 Arduino UNO 互換品 RS485 モジュール XLR コネクター 配線  スケッチ DmxSimpleをとりあえず書き込んでサンプルを動かしてみた。\nこのライブラリデフォルトの Pin アサインは上の図の通りだが、コード内で別途指定すれば変更できるっぽい。 SerialToDmxは PC からのシリアル画面からって感じで送ってやれば送信できる、5ch に 255 を出力するとと送信すればいいらしい。 FadeUpは Pin アサインがデフォルトから変更されているので、 しとけばとりあえず動いた。 LTC485 の仕様としてこの図では DE を Arduino のデジタル GPIO のアウトを使って 5V を印加している。この DE を HIGH にすると送信 LOW にすると受信モードになる","frontmatter":{"date":"01/01","title":"格安ArduinoでDMXを送信する","category":"電子工作","tags":["DMX512"]},"fields":{"slug":"/格安arduinoでdmxを送信する/"}}},{"node":{"id":"9968dc57-ae0a-5edf-92ac-f51c817eeadf","excerpt":"DMX512-A 仕様 シールド付きツイストペアケーブルを使用すること RS-485 では 1500m までの通信が保証されているが、RS-485 の仕様の中でケーブルの長さを伸ばすと通信速度が下がるとされているので、DMX512-A の通信速度 250kbps が保証されるのはケーブル長 400m までとされている。 RS-485 の仕様では 1Master で 32Slave までとされている DMX512-A のボーレートは 250kpbs なので、1bit あたり 4μsec (※1)a 端末にはターミネータ(終端抵抗)をつける DMX512-A では基本的に 120Ω となっている(100-120)と幅を効かせて定義もされている。 仕様上では１パケット長が最小で 22.7msec になり、リフレッシュレートは最大で 44Hz になる ※1: 仕様では基本 250kbps…","frontmatter":{"date":"01/03","title":"DMX512のプロトコルをまとめる","category":"舞台技術","tags":["DMX512"]},"fields":{"slug":"/dmx512のプロトコルをまとめる/"}}},{"node":{"id":"c620443f-4bd4-569f-b1d6-f426f512d903","excerpt":"DMX 機器を何種類か導入したはいいものの、卓がなかったり、単純にオペレータが不足してたりするので、PC で一括制御したくなったので作った。 ネットを検索していると Arudino やラズパイを使い PC から DMX 信号を出力しているものをいくつか見つけたが、たかが DMX にはオーバースペックだなぁとか、思ってたら、安上がりの記事を見つけたので実際に作ってみる。 https://stevenbreuls.com/2013/05/diy-usb-dmx-dongle-interface-for-under-10/ この記事にしたがって作っていけば困ることはなかった。何個か作っているうちに一番手頃に手に入ると思った材料を紹介します。 https://www.amazon.co.jp/dp/B01D140BAU USBA-B オスオス (ダイソーで購入) 50…","frontmatter":{"date":"08/20","title":"安価でDMX機器をPCでコントロールしたかった","category":"舞台技術","tags":["DMX512"]},"fields":{"slug":"/安価でdmx機器をpcでコントロールしたかった/"}}}]},{"fieldValue":"Docker","edges":[{"node":{"id":"756357c9-1946-56a5-be05-a365643fec25","excerpt":"内容 DockerHub の公式の PHP イメージを使っていて、mod_rewite したい人向けのお話です。結論だけ知りたい人は読み飛ばしてね。 事の発端 僕自身が立ち上げた web サービスではもともと URL がという感じでとてもダサかったので、かっこよくしたかった。WordPress などではパーマリンクと呼ばれ URL がイカした感じになっているので、僕も方法をパクった。\n調べると apache 側の設定で mod_rewrite を使うとアクセス時に URL を記述したルールに基づいて置換してくれるらしい。 僕の web サービスではアクセスを全て index.php で受け、get パラメータで動作を変化させている、pukiwiki とか？の設計をパクったはず。動作ルールは以下  cmd view 記事の表示、page で記事を指定 edit 記事の編集、page…","frontmatter":{"date":"08/11","title":"Dockerで立ち上げたwebサーバでmod_rewriteしたかった話","category":"プログラミング","tags":["Docker"]},"fields":{"slug":"/dockerで立ち上げたwebサーバでmod_rewriteしたかった話/"}}},{"node":{"id":"1767c62d-7cac-5639-a338-ec2ba88e149a","excerpt":"完全にメモ書きになってるので Evernote にでも書けよって感じ。 Docker はコンテナ型仮想化システムで、必要な時に必要なだけコンテナを作り、終わったら捨てる。いわば使い捨てだ。でも、消えて欲しくないデータを扱う事もあるだろう。そんな話。 自分はインフラエンジニアではないし、Docker でホストの環境弄らずに開発環境作りたかったから始めたっていう理由 Docker コンテナは使い捨てるもの → 残したいファイルはコンテの外に保存しておこうっていう考えらしい。 Docker の volume にも色々ある docker run の-v オプション\n\ncentos の latest(最新版)を起動するコマンドである。この時-v オプションを使ってコンテナ内に/hoge という名前のシンボリックリングを作成し、フォルダの実体は/var/lib/docker/volumes…","frontmatter":{"date":"01/06","title":"Docker volumeを調べたメモ","category":"プログラミング","tags":["Docker"]},"fields":{"slug":"/docker-volumeを調べたメモ/"}}}]},{"fieldValue":"GitHub Actions","edges":[{"node":{"id":"9701ee8d-c674-5bd6-a6d3-2ff83bd208e8","excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]},"fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"}}}]},{"fieldValue":"Gulp","edges":[{"node":{"id":"148077d5-d706-5426-a2f6-68986081e7f3","excerpt":"gulp-sharp で画像のリサイズをしたい時にできなかったので自分でそれっぽいのを書いた。 フロントエンドで画像を扱う時にsrcディレクトリには元の大きさの画像を用意してdistディレクトリには適切なサイズまで小さくして公開する運用をしている。 自分は欲しい大きさにresizeしてからoptimiseをしています、gulpでのresizeで一番npmでダウンロード数が多いのはgulp-image-resizeです。このライブラリはGraphicsMagick か ImageMagickまたはその両方を必要とします。CIでサイトをビルドする時にこれらがインストールされていないときは自分でapt等でインストールをする必要がありますが、ciの制約でインストールができなかったのでsharpを使ってresizeさせたかった。 探すとgulp-sharp…","frontmatter":{"date":"05/04","title":"GulpでSharpを使って画像のリサイズをする","category":"プログラミング","tags":["Gulp"]},"fields":{"slug":"/2020/5/gulp-sharp/"}}}]},{"fieldValue":"Homebrew","edges":[{"node":{"id":"41b713df-4b5f-5a29-9cf9-7b35f3f5720a","excerpt":"状況説明 かなり前から homebrew cask を使うと。 こんなのが出てきていた。「cask のバージョンアップでアプリが配置されるディレクトリの場所が変わったから前の場所に置いてたアプリ新しいとこに移動してくれ」っていう話だった気がする、筆者は面倒だから移動しなくても使えるからやっていなかったが、docker がうまくインストールできないので今更対応した。\nやることは簡単、コンソールに書いてあるURLに書いている通りに進めるだけだが、しかし今回 Thunderbird…","frontmatter":{"date":"12/03","title":"Homebrew Caskで特定のアプリがインストールできなくなった話","category":"プログラミング","tags":["Homebrew"]},"fields":{"slug":"/homebrew-caskで特定のアプリがインストールできなくなった話/"}}}]},{"fieldValue":"Netlify","edges":[{"node":{"id":"050cff8d-d744-577d-b976-795644a3c3a7","excerpt":"情報が古く、執筆時の Netlifty の UI 等が変わっています。ご注意を 事の発端 IOS 11 ｷﾀ ━(ﾟ ∀ ﾟ)━! 　 Safari からカメラの映像が取得できる！　これでアプリではなくブラウザから AR できるようになった！と喜んでいたら、このカメラの api は https じゃないとセキュリティ的な問題で動かないのである。 Github pages で独自ドメインでホスティングしているサイトを HTTPS にしたいけどお金はない。 すでに導入レポは検索すればいくつも見つかるものの、どうも日本語の情報が少ないのでメモすることにした。 使ったもの Github Netlify お名前.com 手順 お名前.com でドメインを取得します。 Github に公開するサイトのファイル一式を push しておきます。 一度 Github pages…","frontmatter":{"date":"10/15","title":"NetlifyとGithubで独自ドメインのサイトをHTTPS化したメモ","category":"プログラミング","tags":["Netlify"]},"fields":{"slug":"/netlifyとgithubで独自ドメインのサイトをhttps化したメモ/"}}}]},{"fieldValue":"OLA","edges":[{"node":{"id":"92b2a3f0-68e1-541b-9eb6-d2910d7496d1","excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","frontmatter":{"date":"10/13","title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"]},"fields":{"slug":"/2018/10/olaについて/"}}}]},{"fieldValue":"OSS","edges":[{"node":{"id":"0a0afd3e-2456-5f07-93e2-303279c98d09","excerpt":"google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。 さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。 ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。 この恐竜はネットワークに問題がある時に加えて、chromeでにアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。 ちなみにネットワークエラーの時には小さいdinoくんですがで表示したdino…","frontmatter":{"date":"11/22","title":"Chromeのティラノサウルスについて調べた","category":"プログラミング","tags":["Chrome","OSS"]},"fields":{"slug":"/2019/11/dino/"}}}]},{"fieldValue":"dotz","edges":[{"node":{"id":"9701ee8d-c674-5bd6-a6d3-2ff83bd208e8","excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]},"fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"}}},{"node":{"id":"6406ed14-776d-5fa9-b3c7-aafde894648c","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]},"fields":{"slug":"/2019/09/dotz/"}}}]},{"fieldValue":"emacs","edges":[{"node":{"id":"df8d00ec-8851-54cc-8a9c-e2a18039afe8","excerpt":"Emacsのパッケージマネージャーのuse-package.elにはパッケージインストールの他に任意のタイミングで評価させるキーワードというものがありますが、自分はこれをよく分からず使っているので調べてまとめます。 実行タイミング 評価の順番はこうなります パッケージ名の実在確認    パッケージをロード パッケージをロード  インストールするパッケージの設定を記述するためのキーワードです。 :preface 条件分岐キーワードを同時に使用していた時でも、条件分岐よりも先に評価されます。つまり、指定したパッケージ名が実在するならば真っ先に必ず評価してくれます。 :init パッケージが読み込まれる前に評価されます。遅延キーワードの影響を受けません。 :config 当該のパッケージが読み込まれた後に評価されます。initに比べ、config…","frontmatter":{"date":"12/02","title":"use-packageについてまとめる","category":"プログラミング","tags":["emacs","use-package"]},"fields":{"slug":"/2019/12/use-package/"}}},{"node":{"id":"4151f869-7374-5893-aad9-22c3dc0acc5e","excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。 \n\t なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","frontmatter":{"date":"08/21","title":"tmux上のemacsで下線が表示されなかった話","category":"プログラミング","tags":["emacs","tmux"]},"fields":{"slug":"/2019/08/tmux-emacs-underline/"}}}]},{"fieldValue":"gatsby.js","edges":[{"node":{"id":"883be8b6-ae0c-5aad-b296-93a40df83929","excerpt":"前は hatenablog を使っていたものの、自分でブログを構築したくなったので作ってみた。WordPress 等の CMS でやるにはメンテナンスが面倒なこともあって静的サイトジェネレータを使いました。一度 jekyll で作りましたが gatsbyjs を教えてもらってその表示速度に驚かされたのでこれはやるしかないと思い作りました。 gatsby.js は React ベースの静的サイトジェネレータです、つい最近 v2.0.0 になったばかりで公式のドキュメントにかきかけのところがあったりもしますが英語圏に情報が落ちているので大概のことはググればすぐに解決します。ただ日本語の情報が他のジェネレータ系に比べて少ないのでとっつきにくいと言われればそうなのですが最適化とか考えなくてもとりあえず作れば Gatsby…","frontmatter":{"date":"09/26","title":"ブログをgatsbyに移行した話","category":"日記","tags":["gatsby.js","ブログ"]},"fields":{"slug":"/2018/09/gatsbyに移行した話/"}}}]},{"fieldValue":"git","edges":[{"node":{"id":"8da2292b-2dfb-5ec6-8574-20defa3652ee","excerpt":"demo asciicast gitignoreを言語とに自動生成してくれるサービスはいくつかありますが、わざわざwebサイトを開くのも面倒です。\n幸いなことにgitignore.ioがapiを提供してくれています、これを利用してgitにサブコマンドを追加しましょう。 ついでに.gitignoreを上書き・追記の確認・gitignore.ioにテンプレートが存在しない場合はエラーを表示などもあると親切ですね。shにするとこんな感じに。 .gitconfigに書くとときには全体を関数にする・ダブルクォーテーションをエスケープ・が使えないのでに差し替えなどをすると以下になります。 書いていて気づいたんですが、#はエスケープせずに動きますね。 使い方","frontmatter":{"date":"06/14","title":".gitignoreを自動生成するサブコマンドを作ろう","category":"プログラミング","tags":["git"]},"fields":{"slug":"/2020/6/gitignore/"}}}]},{"fieldValue":"go","edges":[{"node":{"id":"9701ee8d-c674-5bd6-a6d3-2ff83bd208e8","excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]},"fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"}}}]},{"fieldValue":"golang","edges":[{"node":{"id":"6406ed14-776d-5fa9-b3c7-aafde894648c","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]},"fields":{"slug":"/2019/09/dotz/"}}}]},{"fieldValue":"homebrew","edges":[{"node":{"id":"dc98ca9f-74fc-54e2-9e62-a5e0f85c40c0","excerpt":"Cask に追加してみる homebrew を更新し、作業中は自動更新を止める まずで更新をかけておきます、これで Cask 含め brew 本体も更新されます。 次に、homebrew は Cask を自動更新する仕様なので作業中はこれを止めておきます。 環境変数なのでターミナルを開き直したあとや、別のターミナルには効きませんのでご注意を。 Cask に追加したいアプリケーションをインストールしておく 今までと同じようにブラウザでインストーラーなどをダウンロードし、インストールします。後々使うのでダウンロードしたファイルを消さないようにしましょう。 github 上でhomebrew-caskを fork する local 上の homebrew ディレクトリの git に fork したリポジトリを追加する Cask…","frontmatter":{"date":"08/20","title":"homebrew-caskにないアプリは自分で追加しよう","category":"プログラミング","tags":["homebrew"]},"fields":{"slug":"/2019/01/homebrew-cask-add/"}}}]},{"fieldValue":"lily58","edges":[{"node":{"id":"0b9ce2f9-0726-5ea4-96db-06456fe5db73","excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。 keymap.cにテンキーレイヤーを追加する レイヤー定義はに書き込みます。 レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lower…","frontmatter":{"date":"06/20","title":"Lily58にレイヤーを追加する","category":"プログラミング","tags":["lily58","自作キーボード"]},"fields":{"slug":"/2020/6/lily58-add-layer/"}}}]},{"fieldValue":"mac","edges":[{"node":{"id":"81cd0ac6-a648-5704-a4dd-2320cb859b9e","excerpt":"今日ターミナルを起動すると と表示されるようになった。とりあえず perl を最新にしてみようと plenv をインストール\nhttps://github.com/tokuhirom/plenv#homebrew-on-mac-os-x\n公式の説明どうりに .bachrc に追記 最新版をダウンロード、インストール パッケージマネージャーもインストール(pip 的なやつ) そして local/lib.pm をインストール","frontmatter":{"date":"06/05","title":"macのターミナル起動時に怒られるようになった話","category":"プログラミング","tags":["mac"]},"fields":{"slug":"/macのターミナル起動時に怒られるようになった話/"}}},{"node":{"id":"de4c983f-dc0f-5421-89b1-55d20dbf1d9c","excerpt":"自分用のメモ記事なので、参考程度にどうぞ。 環境 MacBookAir macOS Sierra 10.12.2 homebrew 1.1.5 homebrew-cask 1.1.5 mas 1.3.1 mackup 0.8.15 準備編 １. 必要なファイルを外部のストレージにコピー home ディレクトリをそのままコピーしてしまえばある程度は安心 プッシュしていない Git プロジェクトはプロジェクトごとコピーしておけばブランチ構造ごとコピーできる VirtualBox のエクスポートツールでバックアップしてもいいし、面倒ならフォルダごとコピーして*.vbox ファイルをあとでインポートすれば OK ２. Dropbox をインストールし同期できるように設定しておく インストール済みならばそれで OK…","frontmatter":{"date":"12/30","title":"MBAのSerriaをクリーンインストールした時の手順メモ","category":"プログラミング","tags":["mac"]},"fields":{"slug":"/mbaのserriaをクリーンインストールした時の手順メモ/"}}}]},{"fieldValue":"macOS","edges":[{"node":{"id":"6406ed14-776d-5fa9-b3c7-aafde894648c","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]},"fields":{"slug":"/2019/09/dotz/"}}}]},{"fieldValue":"qmk firmware","edges":[{"node":{"id":"7a21ab8e-d2e3-50d9-88b9-576c54a591f1","excerpt":"キー入力が下手なのでバックスペースを連打しがちなのですがバックスペースキーはキーボード上では遥か右上にあります。これが原因で右手首を痛めたことも。入力精度を上げろという話なのですが出来るならもうしてます。 また、以外と日本語入力をしていると使いがちな「ー」伸ばし棒も近くに欲しいものです。  今回はにbackspace・にハイフンを割り当てます。 Ctrlキー Ctrlキー含め装飾キーには様々なキーバインドが割り当てられています。一般的にはにはreturn・にはbackspaceなど色々あります。zsh/bashなどのshellやターミナルのキーバインドに設定されていることが多いです。macではに行末まで削除があったりと気が利いています。 qmk firmwareではraise/lower…","frontmatter":{"date":"04/08","title":"qmk firmwareでctrlとの同時押しをカスタマイズする","category":"プログラミング","tags":["qmk firmware","自作キーボード"]},"fields":{"slug":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/"}}}]},{"fieldValue":"tmux","edges":[{"node":{"id":"4151f869-7374-5893-aad9-22c3dc0acc5e","excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。 \n\t なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","frontmatter":{"date":"08/21","title":"tmux上のemacsで下線が表示されなかった話","category":"プログラミング","tags":["emacs","tmux"]},"fields":{"slug":"/2019/08/tmux-emacs-underline/"}}}]},{"fieldValue":"use-package","edges":[{"node":{"id":"df8d00ec-8851-54cc-8a9c-e2a18039afe8","excerpt":"Emacsのパッケージマネージャーのuse-package.elにはパッケージインストールの他に任意のタイミングで評価させるキーワードというものがありますが、自分はこれをよく分からず使っているので調べてまとめます。 実行タイミング 評価の順番はこうなります パッケージ名の実在確認    パッケージをロード パッケージをロード  インストールするパッケージの設定を記述するためのキーワードです。 :preface 条件分岐キーワードを同時に使用していた時でも、条件分岐よりも先に評価されます。つまり、指定したパッケージ名が実在するならば真っ先に必ず評価してくれます。 :init パッケージが読み込まれる前に評価されます。遅延キーワードの影響を受けません。 :config 当該のパッケージが読み込まれた後に評価されます。initに比べ、config…","frontmatter":{"date":"12/02","title":"use-packageについてまとめる","category":"プログラミング","tags":["emacs","use-package"]},"fields":{"slug":"/2019/12/use-package/"}}}]},{"fieldValue":"youtube live","edges":[{"node":{"id":"6b8a88f4-e081-51e7-bd50-a41147729c84","excerpt":"感染防止などの理由でいつもは集まって行なっていたミーティングができなくなってしまったので、今回youtube liveでリアルタイム配信をやってみたレポートです。 使用した機材やつまづきポイントなどを書いておくので何かの助けになれば幸いです。 事の発端 大学のサークルにて月に一回所属している人を大教室に集めて情報共有などを行う習慣があり、2月までは大教室に付属するプロジェクターとマイクを用いて講義のような形式で行なっていた。しかし3月は感染防止の観点から大学側より集会禁止の通知が届いたため中止に。 この時期は大学のサークルということもあり新歓などで慌ただしく情報共有の場が必要でした。その他のことも忙しい時期らしい。なので予定していた日付はそのままで配信集会をやろうということになった。 配信準備    今回使用した機材は以下 ビデオミキサー V-1HD Roland PC…","frontmatter":{"date":"04/01","title":"youtube liveでネット配信をやったレポ","category":"日記","tags":["youtube live"]},"fields":{"slug":"/2020/4/ネット配信をやってみたレポ/"}}}]},{"fieldValue":"ブログ","edges":[{"node":{"id":"883be8b6-ae0c-5aad-b296-93a40df83929","excerpt":"前は hatenablog を使っていたものの、自分でブログを構築したくなったので作ってみた。WordPress 等の CMS でやるにはメンテナンスが面倒なこともあって静的サイトジェネレータを使いました。一度 jekyll で作りましたが gatsbyjs を教えてもらってその表示速度に驚かされたのでこれはやるしかないと思い作りました。 gatsby.js は React ベースの静的サイトジェネレータです、つい最近 v2.0.0 になったばかりで公式のドキュメントにかきかけのところがあったりもしますが英語圏に情報が落ちているので大概のことはググればすぐに解決します。ただ日本語の情報が他のジェネレータ系に比べて少ないのでとっつきにくいと言われればそうなのですが最適化とか考えなくてもとりあえず作れば Gatsby…","frontmatter":{"date":"09/26","title":"ブログをgatsbyに移行した話","category":"日記","tags":["gatsby.js","ブログ"]},"fields":{"slug":"/2018/09/gatsbyに移行した話/"}}}]},{"fieldValue":"ポリッドスクリーン","edges":[{"node":{"id":"21596fd3-377a-50a9-96bd-fcd7986687af","excerpt":"イベントレポ。自分は途中から企画に参加した、今回はプロマネ兼システム構築としての参加でした。 ここでは照明・音響・映像周りのシステムについてのメモ 照明 今回の照明周りの機材  「前回よりも良いものを」ということで前回の反省を踏まえて今回挑戦したことです。 事前プログラミングによる照明の自動制御と照明と映像の同期 電飾を用いた立体的な演出 生バンド演奏によるライブ プロジェクター 2 台同時投影 事前プログラミングによる照明の自動制御と照明と映像の同期 第一回はパレータス SX で手動でオペして、ボーカロイド楽曲の速いテンポにオペレーターが付いて行けずいっぱいいっぱいだったので、2 回目は自動化を導入。2 回目では映像の再生ボタンと照明の再生ボタンをせーので押す方法で同期していた。今回 3 回目では 2 台のプロジェクターも含め…","frontmatter":{"date":"07/05","title":"ポリッドスクリーン系イベントのシステム周りの話","category":"舞台技術","tags":["ポリッドスクリーン"]},"fields":{"slug":"/ポリッドスクリーン系イベントのシステム周りの話/"}}},{"node":{"id":"ab644eab-23a4-5a42-a9ad-361a1d812940","excerpt":"イベント概要 非営利 自分も含め、企画側は全員学生、お客さんは学生と教員 イベントを行った場所は学校 使用キャラクターはクリプトンヒューチャー社の VOCALOID キャラクターのみ 準備 スクリーンについて スクリーンを選ぶポイント 安い 短辺が２メートル以上あるロール状のシート 無地 (フィルム表面に何も印字されていない) 学生でも買える 軽い 学校に搬入可能である を考え、今回利用したのがカインズホームの農ポリ 0.05X210X100 5000 円以下で購入でき、サイズも短辺が 2m10cm あり支払いもコンビニで OK、完全に無地で、ロールの状態で 9kg…","frontmatter":{"date":"08/04","title":"ポリッドスクリーンを使ったボカロ系イベントを作った話","category":"舞台技術","tags":["ポリッドスクリーン"]},"fields":{"slug":"/ポリッドスクリーンを使ったボカロ系イベントを作った話/"}}}]},{"fieldValue":"思ったこと","edges":[{"node":{"id":"db550e9a-dd19-52b1-8596-5f8c8895995f","excerpt":"来年の後半あたりからキャッシュレス決済に補助金がつくとかつかないとか言われてますね。自分は 4 月大学に入ってから出来るだけ現金を使わない生活をしてきました。理由としては家計簿を自動化したかったからです。 高校生の頃はあまり買い物もしなかったので zaim というレシートの写真を撮ると自動で家計簿をつけてくれるサービスを使っていました。しかし大学生になり、なんとかクレジットカードを作れるようになったので PASMO のオートチャージ機能をつけてみました。これがかなり便利で改札を通過する時に設定額を下回っている場合は自動で入金をしてくれるというものです。つまり改札にタッチした時には。 Ferica…","frontmatter":{"date":"12/28","title":"キャッシュレス決済について思うこと","category":"日記","tags":["思ったこと","生産性のない話"]},"fields":{"slug":"/2018/12/kyash-less/"}}}]},{"fieldValue":"生産性のない話","edges":[{"node":{"id":"db550e9a-dd19-52b1-8596-5f8c8895995f","excerpt":"来年の後半あたりからキャッシュレス決済に補助金がつくとかつかないとか言われてますね。自分は 4 月大学に入ってから出来るだけ現金を使わない生活をしてきました。理由としては家計簿を自動化したかったからです。 高校生の頃はあまり買い物もしなかったので zaim というレシートの写真を撮ると自動で家計簿をつけてくれるサービスを使っていました。しかし大学生になり、なんとかクレジットカードを作れるようになったので PASMO のオートチャージ機能をつけてみました。これがかなり便利で改札を通過する時に設定額を下回っている場合は自動で入金をしてくれるというものです。つまり改札にタッチした時には。 Ferica…","frontmatter":{"date":"12/28","title":"キャッシュレス決済について思うこと","category":"日記","tags":["思ったこと","生産性のない話"]},"fields":{"slug":"/2018/12/kyash-less/"}}}]},{"fieldValue":"自作キーボード","edges":[{"node":{"id":"0b9ce2f9-0726-5ea4-96db-06456fe5db73","excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。 keymap.cにテンキーレイヤーを追加する レイヤー定義はに書き込みます。 レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lower…","frontmatter":{"date":"06/20","title":"Lily58にレイヤーを追加する","category":"プログラミング","tags":["lily58","自作キーボード"]},"fields":{"slug":"/2020/6/lily58-add-layer/"}}},{"node":{"id":"7a21ab8e-d2e3-50d9-88b9-576c54a591f1","excerpt":"キー入力が下手なのでバックスペースを連打しがちなのですがバックスペースキーはキーボード上では遥か右上にあります。これが原因で右手首を痛めたことも。入力精度を上げろという話なのですが出来るならもうしてます。 また、以外と日本語入力をしていると使いがちな「ー」伸ばし棒も近くに欲しいものです。  今回はにbackspace・にハイフンを割り当てます。 Ctrlキー Ctrlキー含め装飾キーには様々なキーバインドが割り当てられています。一般的にはにはreturn・にはbackspaceなど色々あります。zsh/bashなどのshellやターミナルのキーバインドに設定されていることが多いです。macではに行末まで削除があったりと気が利いています。 qmk firmwareではraise/lower…","frontmatter":{"date":"04/08","title":"qmk firmwareでctrlとの同時押しをカスタマイズする","category":"プログラミング","tags":["qmk firmware","自作キーボード"]},"fields":{"slug":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/"}}}]}]}}