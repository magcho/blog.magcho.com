{"data":{"site":{"siteMetadata":{"title":"magchoの雑記","author":"magcho"}},"markdownRemark":{"id":"dc98ca9f-74fc-54e2-9e62-a5e0f85c40c0","excerpt":"Cask に追加してみる homebrew を更新し、作業中は自動更新を止める まずで更新をかけておきます、これで Cask 含め brew 本体も更新されます。 次に、homebrew は Cask…","html":"<h2>Cask に追加してみる</h2>\n<ol>\n<li>\n<p>homebrew を更新し、作業中は自動更新を止める</p>\n<p>まず<code class=\"language-text\">brew update</code>で更新をかけておきます、これで Cask 含め brew 本体も更新されます。</p>\n<p>次に、homebrew は Cask を自動更新する仕様なので作業中はこれを止めておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HOMEBREW_NO_AUTO_UPDATE</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre></div>\n<p>環境変数なのでターミナルを開き直したあとや、別のターミナルには効きませんのでご注意を。</p>\n</li>\n<li>\n<p>Cask に追加したいアプリケーションをインストールしておく</p>\n<p>今までと同じようにブラウザでインストーラーなどをダウンロードし、インストールします。後々使うのでダウンロードしたファイルを消さないようにしましょう。</p>\n</li>\n<li>github 上で<a href=\"https://github.com/Homebrew/homebrew-cask\">homebrew-cask</a>を fork する</li>\n<li>\n<p>local 上の homebrew ディレクトリの git に fork したリポジトリを追加する</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">github_user</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;my-github-username>'</span>\n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>brew --repository<span class=\"token variable\">)</span></span>\"</span>/Library/Taps/Homebrew/homebrew-cask\n$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token string\">\"<span class=\"token variable\">${github_user}</span>\"</span> <span class=\"token string\">\"https://github.com/<span class=\"token variable\">${github_user}</span>/homebrew-cask\"</span></code></pre></div>\n</li>\n<li>\n<p>Cask 名を決める</p>\n<p>いわゆる<code class=\"language-text\">brew cask install 〇〇</code>のところの名前です。命名規則があるようなのですがこれを自動で決めてくれるコマンドがあります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>brew --repository<span class=\"token variable\">)</span></span>/Library/Taps/Homebrew/homebrew-cask/developer/bin/generate_cask_token\"</span> <span class=\"token string\">'/Applications/〇〇.app'</span></code></pre></div>\n</li>\n<li>\n<p>Cask の定義ファイルを作る</p>\n<p>定義ファイルは.rb ファイルのテキストです。Stanzas という記法らしいです。これもコマンドにて雛形を作ってくれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew cask create <span class=\"token punctuation\">{</span>Cask名<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>定義ファイルを書く</p>\n<p><a href=\"https://github.com/Homebrew/homebrew-cask/blob/master/doc/development/adding_a_cask.md#cask-stanzas\">homebrew-cask の仕様</a>などを読みながら雛形の空欄を埋めていきます。</p>\n<p>ちなみに<code class=\"language-text\">SHA-256</code>の部分は.app ではなくダウンロードした.zip や.dmg などのファイルのハッシュ値です。これは以下のコマンドで確認できます。ダウンロードフォルダにファイルが残っていると思うので以下のような感じで確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ shasum -a <span class=\"token number\">256</span> <span class=\"token string\">\"~/Downloads/〇〇.zip\"</span></code></pre></div>\n<p>また、url にバージョンの数字などが含まれる場合は変数としておくことでバージョンアップ時に定義ファイルを自動更新できるので変更しておきましょう。変数は<code class=\"language-text\">#{version}</code>で置き換えることができます。ここで注意したいのは先のコマンドで作った雛形ではシングルクオートですが、変数を含める際にはダブルクオートでなければなりません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Before url &#39;https://example.com/app-v1.0.1.zip&#39;\nAfter  url &quot;https://example.com/app-v#{version}.zip&quot;</code></pre></div>\n<p>name の部分にはスペースを含めることができます。大文字小文字やスペース位置などを正確に入力しておきましょう。</p>\n<p>app には<code class=\"language-text\">/Applications</code>にインストールされているファイル名を入力しておきます。</p>\n</li>\n<li>\n<p>書き上げた定義ファイルの確認</p>\n<p>まず実際にインストールできるか確認しましょう。手順の中ですでに PC 内にインストール済みなので、アンインストールするか、<code class=\"language-text\">-f</code>オプションで上書きしましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew cask <span class=\"token function\">install</span> -f 〇〇</code></pre></div>\n<p>インストール後動作に問題がなければ OK です。</p>\n<p>定義ファイルのシンタックスチェックや、必要事項の記入漏れなどを確認・自動修正してくれるコマンドが備えれらています。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew cask audit 〇〇 --download\n$ brew cask style Casks/〇〇.rb\n\n$ brew cask style Casks/〇〇.rb --fix   // <span class=\"token operator\">&lt;</span>- 自動修正してくれます。</code></pre></div>\n<p>これにて定義ファイルが完成です。次は PR をしていきます。</p>\n</li>\n<li>\n<p>変更を commit・push する</p>\n<p>コミットメッセージにもガイドラインが決まっています。</p>\n<blockquote>\n<p>The first line is commit summary, 50 characters or less,<br>\nFollowed by an empty line,<br>\nFollowed by an explanation of the commit, wrapped to 72 characters.</p>\n</blockquote>\n<p><a href=\"https://github.com/Homebrew/homebrew-cask/blob/master/doc/development/adding_a_cask.md#commit-messages\">ここ</a>には例とかもっと詳しいガイドラインの紹介とかがあります\nそして fork した自分のリポジトリに push します</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>my-github-username<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>branch名<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>プルリクエストを出す</p>\n<p>普通に Github 上でプルリクを発行します。メッセージに自動で必要項目の雛形が出てくるので記入、チェックを入れて PR しましょう。1~2 日ぐらいでレビュー or マージしてくれます。みなさん優しくて不都合があっても教えてくれます。</p>\n<p>これで晴れて homebrew のコントリビュータになれました！！ヤッタネ！！</p>\n</li>\n<li>\n<p>最後に作業した環境を戻しておきます</p>\n<p>推奨されているのでやっときましょう</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>brew --repository<span class=\"token variable\">)</span></span>\"</span>/Library/Taps/Homebrew/homebrew-cask\n$ <span class=\"token function\">git</span> checkout master</code></pre></div>\n</li>\n</ol>","frontmatter":{"title":"homebrew-caskにないアプリは自分で追加しよう","tags":["homebrew"],"category":"プログラミング","date":"08/20"}},"allMarkdownRemark":{"group":[{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Netlify"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"}]}},"pageContext":{"slug":"/2019/01/homebrew-cask-add/","previous":{"excerpt":"先日 Apple watch のシリーズ 3 の 42mm モデルを買いました。ほんとは paypay のキャッシュバックキャンペーンで買いたかったんですが、忙しくて買い損ねてしまった。 スマートウォッチを買うのは初めてではなくて、5 月ぐらいから amazon で売ってる 3,000 円ぐらいの中国のヘルスケアバンドみたいなやつを買ってつけてました。iPhone の通知を振動とディスプレイで表示してくれるのでとても便利です。自分はお仕事柄暗くて大音量の音が鳴っている空間にいることがあるのでポケットにいれたスマホの通知に気が付きません。さらにスマートウォッチならバックライトがついてたり、有機 EL でディスプレイが光るので暗くても表示が見えて良きです。 そして、apple watch に買い換えてからなんですが、以前のスマートウォッチに比べて画面が大きいですし、厚みが 5mm…","fields":{"slug":"/2019/01/apple-watch/"},"frontmatter":{"date":"01/20","title":"Apple watchを買った","category":"日記","tags":["Apple Watch"]}},"next":{"excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。 \n\t なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","fields":{"slug":"/2019/08/tmux-emacs-underline/"},"frontmatter":{"date":"08/21","title":"tmux上のemacsで下線が表示されなかった話","category":"プログラミング","tags":["emacs","tmux"]}}}}