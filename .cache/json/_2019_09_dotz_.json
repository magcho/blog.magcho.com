{"data":{"site":{"siteMetadata":{"title":"magchoの雑記","author":"magcho"}},"markdownRemark":{"id":"6406ed14-776d-5fa9-b3c7-aafde894648c","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUS…","html":"<p>増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。</p>\n<p>メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。</p>\n<p>初バタフライキーボードです、このペチペチ感が楽しいです。</p>\n<p>さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。</p>\n<p>あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshickを使ってましたがこれはディレクトリが追加できないなど、ちょっと不便だなぁと思うところが多かったので違うツールを探していたんですがGolangを使ってみたかったという適当な理由で自作してしまいました。</p>\n<p><a href=\"https://github.com/magcho/dotz\">dotz github</a></p>\n<p>適当にロゴっぽいものをつけてREADMEを適当な英語で作っておけばそれっぽく見えますね。内容はただのlnコマンドなどのラッパーです。</p>\n<p>今回はGolang向けのコマンドラインアプリケーションライブラリの <a href=\"https://github.com/urfave/cli\">urfave/cli</a>を使いました。</p>\n<p>このライブラリではサブコマンドやパラメータのほか、yaml, toml, jsonなどの設定ファイルを読み込んだり環境変数を読んだりとcliアプリケーションを作る上ではこのライブラリで完結すると思います。あと、ドキュメント読まなくても書き始められるぐらいわかりやすい構造をしています。感動！！</p>\n<p>今回はとりあえずmacOS向けのバイナリしか作ってませんが、CIでそれぞれのOS向けのバイナリをビルドして公開してみようかなと考えています。</p>\n<p>また、今回はhomebrewの<a href=\"https://github.com/magcho/homebrew-magcho\">オレオレformula</a>も用意しているのでdotzのインストール自体もセットアップスクリプト内に収めることができますね、最高です。 </p>","frontmatter":{"title":"dotfilesを管理するツールを作った","tags":["golang","dotz","macOS"],"category":"プログラミング","date":"09/20"}},"allMarkdownRemark":{"group":[{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Netlify"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"}]}},"pageContext":{"slug":"/2019/09/dotz/","previous":{"excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。 \n\t なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","fields":{"slug":"/2019/08/tmux-emacs-underline/"},"frontmatter":{"date":"08/21","title":"tmux上のemacsで下線が表示されなかった話","category":"プログラミング","tags":["emacs","tmux"]}},"next":{"excerpt":"google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。 さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。 ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。 この恐竜はネットワークに問題がある時に加えて、chromeでにアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。 ちなみにネットワークエラーの時には小さいdinoくんですがで表示したdino…","fields":{"slug":"/2019/11/dino/"},"frontmatter":{"date":"11/22","title":"Chromeのティラノサウルスについて調べた","category":"プログラミング","tags":["Chrome","OSS"]}}}}