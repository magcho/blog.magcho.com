{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2021/12/m1-emacsng/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"a4ff480c-b300-57ba-b4a8-306e052eb15f","excerpt":"先日Intel mac向けにemacs-ngをビルドする記事を書きました。しばらく使ってみましたが深刻な問題が起こることもなく常用できそうだったのでM1 mac…","html":"<p>先日<a href=\"/2021/10/emacs-ng/\">Intel mac向けにemacs-ngをビルドする記事</a>を書きました。しばらく使ってみましたが深刻な問題が起こることもなく常用できそうだったのでM1 mac向けにもビルドして普段使いしたいと思った次第です。</p>\n<h2>ビルド手順</h2>\n<p>ビルドに必要な依存関係をドキュメントに従ってインストールします。<a href=\"https://emacs-ng.github.io/emacs-ng/build/building/\">https://emacs-ng.github.io/emacs-ng/build/building/</a></p>\n<p>以下のコマンドでビルドします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">brew <span class=\"token function\">install</span> gnutls texinfo autoconf zlib libgccjit jansson\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$CPATH</span>:<span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix libgccjit<span class=\"token variable\">)</span></span>/include\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LIBRARY_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$LIBRARY_PATH</span>:<span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix libgccjit<span class=\"token variable\">)</span></span>/lib/gcc/11\"</span>\n\n./autogen.sh\n\n./configure --with-json --with-native-compilation --with-modules --without-x --with-gnutls --with-xml2\n\n<span class=\"token function\">make</span> -j8\n\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<p>今回は<code class=\"language-text\">--with-native-compilation</code>と<code class=\"language-text\">--with-json</code>を有効化します。jsonの方は<code class=\"language-text\">libjansson</code>をbrewでインストールし、configure時にオプションを渡してあげればOKです。</p>\n<p>native compilationの方は、現状コンパイラがlibgccjitのパスを見つけられないみたいなので、環境変数を利用してコンパイラにパスを渡しておけばビルドできます。</p>\n<h2>追記</h2>\n<p>インストール先を<code class=\"language-text\">/opt/emacs-ng</code>にしたかったので最近は以下のオプションでコンパイルしています</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./configure <span class=\"token punctuation\">\\</span>\n --enable-locallisppath<span class=\"token operator\">=</span>/opt/emacs-ng/share/site-lisp <span class=\"token punctuation\">\\</span>\n --infodir<span class=\"token operator\">=</span>/opt/emacs-ng/share/info/emacs <span class=\"token punctuation\">\\</span>\n --prefix<span class=\"token operator\">=</span>/opt/emacs-ng <span class=\"token punctuation\">\\</span>\n --with-json <span class=\"token punctuation\">\\</span>\n --with-native-compilation <span class=\"token punctuation\">\\</span>\n --with-modules <span class=\"token punctuation\">\\</span>\n --with-gnutls <span class=\"token punctuation\">\\</span>\n --with-xml2 <span class=\"token punctuation\">\\</span>\n --without-x <span class=\"token punctuation\">\\</span>\n --without-ns <span class=\"token punctuation\">\\</span>\n --without-dbus <span class=\"token punctuation\">\\</span>\n --without-imagemagick <span class=\"token punctuation\">\\</span>\n --without-selinux</code></pre></div>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2021/12/m1-emacsng.md","frontmatter":{"title":"M1 macでemacs-ngをビルドする","tags":["emacs"],"category":"プログラミング","fullDate":"2021-12-11"},"fields":{"lastFileUpdatedAt":"2022-09-17","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2021/12/m1-emacsng/","previous":{"excerpt":"EmacsにTabを追加するパッケージであるtabbar.elを使っています。このパッケージはBuffer名をエディタ上部に並べてくれる機能を提供します。 tabbar.elには標準でmajor modeごとにタブグループを作る機能があります、このグルーピングをproject名(.gitディレクトリが入っているディレクトリ名)ごとにまとめてVSCodeのマルチウィンドウのように扱いたかったので以下のようにして解決しました。 projectile.elに依存しているので別途設定が必要です。","fields":{"slug":"/2021/10/tabbar-group/"},"frontmatter":{"date":"10/19","title":"Emacsのtabbar-modeをProjectごとに切り替える","category":"プログラミング","tags":["emacs"]}},"next":{"excerpt":"先日VoxelabのAquilaという3Dプリンターを購入しました。以前から欲しいな〜と思っていた3D printerを一人暮らしを始めたしいい機会だと思って購入してみました。3Dプリンター自体は初めてではなく、今まではfab施設の方に3D CADのデータを送って出力作業はお任せしていたので実際に自分で印刷するのは初でした。 Aquilaシリーズの一番廉価モデルで２万円のものなのであまり期待していなかったのですが、届いて組み立ててみるとかなりちゃんとしています。無骨なアルミフレームのフォルムにガラスプレートがついています。かっこいい 試しにDEMOでついているデータを出力してみました。パラメーターの調整なしでもかなり綺麗に出力できています、２万円のプリンターすごい  CAD ネット上にあるデータを印刷して遊んでいたのですが、そろそろ自分で作りたくなってきました。ちょうど3D printer…","fields":{"slug":"/2022/5/3d_printer/"},"frontmatter":{"date":"05/06","title":"3Dプリンターを買った","category":"日記","tags":["3D_printer"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}