{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2021/10/github_actions_selfhosted/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"d127d264-aac6-521d-85fc-442bab941061","excerpt":"初めに GitHub Actionsには2000分/月の無料枠がありますがビジュアルテストなど時間がかかりそうなテストをたくさん回そうとすると足りなくなることがあります。GitHubが提供しているSelf hosted runner…","html":"<h2>初めに</h2>\n<p>GitHub Actionsには2000分/月の無料枠がありますがビジュアルテストなど時間がかかりそうなテストをたくさん回そうとすると足りなくなることがあります。GitHubが提供しているSelf hosted runnerのエージェントを自前で用意したマシンに入れることで代わりの実行環境として利用できます。</p>\n<h2>VM</h2>\n<p>Oracle cloudのARMマシンが余っていたのでこのマシンたちを利用して構築しました。<a href=\"https://docs.github.com/ja/actions/hosting-your-own-runners/about-self-hosted-runners#supported-architectures-and-operating-systems-for-self-hosted-runners\">セルフホストランナーをサポートするアーキテクチャとオペレーティングシステム</a>に記載されているようにLinuxであればARMでも利用できます。</p>\n<h2>インストール</h2>\n<p>Jenkinsのようにマシンにエージェントをインストールしてから設定するのかと思いきや、まず最初に設定するリポジトリ/Organizationの設定画面からnew self-hosted runnerをクリックし、表示されるコマンドをマシンに入力していきます。</p>\n<p>このself-hosted runnerはエージェント側からGitHubに向けてのhttpsのロングポーリング<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>になっているのでIPの固定や外部からのネットワークを開けることなく利用できます。オフィスや自宅サーバーに優しいです。外から内向きの通信が必要ないのでFWで塞いでおきました。</p>\n<h2>運用</h2>\n<p>self-hosted runnerをActionsで利用するには<code class=\"language-text\">runs-on: 'self-hosted'</code>とするかインストール時に付与したラベル名で利用できます。</p>\n<p>複数マシンに同一ラベルを付与しておけば<code class=\"language-text\">runs-on: 'hoge-label'</code>で利用できます。同一ラベルが付与されたマシンのうちIdle状態のマシンに割り当てられます。何度か試してみたところ複数台がIdle状態であればマシンのうち一番若い名前が付与されたマシンから割り当てられるようです。</p>\n<p>多めにテスト回しそうだなと思ったときにマシンを追加で登録して、忙しい時期が過ぎたら追加で増やしたマシンを削除すれば良さそうです。ただ、GitHub上ではこのメトリクスが取れないので自前で監視のしくみを整える必要がありそうです。</p>\n<h2>雑感</h2>\n<p>Githubの通常の実行環境であれば毎回マシンが破棄されるで依存パッケージ等のキャッシュや、環境変数など気を遣う部分が多かったのですがセルフホストランナーではマシンの環境変数やフォルダーへのアクセスができるので対応しやすいです。</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#communication-between-self-hosted-runners-and-github\">https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#communication-between-self-hosted-runners-and-github</a><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2021/10/github_actions_selfhosted.md","frontmatter":{"title":"GitHub Actionsのセルフホストランナーを試す","tags":["github"],"category":"プログラミング","fullDate":"2021-10-18"},"fields":{"lastFileUpdatedAt":"2022-09-20","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2021/10/github_actions_selfhosted/","previous":{"excerpt":"https://github.com/emacs-ng/emacs-ng 先日emacs-ngという通常のEmacsをforkしRustのWebrenderとDenoのランタイムを加えたプロジェクトを見つけました。READMEに記載されているように、完全な別プロジェクトというわけではなく定期的に本家のEmacsのmasterブランチの変更を取り込み、あくまでも現行のEmacsに新しいアイディアを付与するというプロジェクトらしいです。 現在のemacs-ngは本家の2021年8月24日時点のmasterを取り込んでいるためネイティブコンパイルも利用できます。 Ubuntu向けのバイナリであればGitHub Releaseで配布されていますが、MacOS向けのバイナリは配布されていないので自前でビルドする必要があります。ビルド方法はドキュメントページに記載されていますがPATH…","fields":{"slug":"/2021/10/emacs-ng/"},"frontmatter":{"date":"10/11","title":"emacs-ngをnative comp有効化してmacos向けにビルドした","category":"プログラミング","tags":["emacs"]}},"next":{"excerpt":"EmacsにTabを追加するパッケージであるtabbar.elを使っています。このパッケージはBuffer名をエディタ上部に並べてくれる機能を提供します。 tabbar.elには標準でmajor modeごとにタブグループを作る機能があります、このグルーピングをproject名(.gitディレクトリが入っているディレクトリ名)ごとにまとめてVSCodeのマルチウィンドウのように扱いたかったので以下のようにして解決しました。 projectile.elに依存しているので別途設定が必要です。","fields":{"slug":"/2021/10/tabbar-group/"},"frontmatter":{"date":"10/19","title":"Emacsのtabbar-modeをProjectごとに切り替える","category":"プログラミング","tags":["emacs"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}