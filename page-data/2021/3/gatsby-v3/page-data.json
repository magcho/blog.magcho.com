{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2021/3/gatsby-v3/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"a4f46984-92ca-52f8-9c9b-054d61448452","excerpt":"2021年3月にGatsby.jsのv3がリリースされました、多少の破壊的な変更はあるもののv1からv2の時ほどの苦労はなくアップデートできた気がします。 いくつか進化がありますが、一番にビルド速度が一段と早くなった気がします。HotReload…","html":"<p>2021年3月にGatsby.jsのv3がリリースされました、多少の破壊的な変更はあるもののv1からv2の時ほどの苦労はなくアップデートできた気がします。</p>\n<p>いくつか進化がありますが、一番にビルド速度が一段と早くなった気がします。HotReloadが特に早くなりエディタからブラウザに画面を切り替えるとすでにリロードされており待ち時間が無くなっているように感じます、すごい。さらにはブラウザ上にエラーメッセージがモーダルでしっかり表示されるようになりました。これで開発も一段と楽になった気がします。また、いよいよincremental buildが正式に使えるようになりました。deployにかかる時間が大幅に短縮されるのではないでしょうか。</p>\n<p>v2からv3への更新にあたっていくつかの破壊的な更新があるため多少修正しないとビルドが通りませんでした。内容は公式の<a href=\"https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v2-to-v3/#updating-your-dependencies\">マイグレーションガイド</a>に従えばOKでした。</p>\n<p>また、v2の時にもいろいろなアップデートがあり推奨される記法が変わっていたのでこれらも修正していきます。</p>\n<h2>更新作業</h2>\n<p>まずはnpmでGatsby.jsをアップデートします。これはnpm7の仕様変更によるものですがpeer dependencies周りでエラーになったので<code class=\"language-text\">npm install gatsby@latest --legacy-peer-deps</code>オプション付きで更新します。</p>\n<p>次にgraphql関係のimportを修正しました。<a href=\"https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v2-to-v3/#using-a-global-graphql-tag-for-queries\">マイグレーションガイド</a> にも書いてありますが<code class=\"language-text\">graphql</code>がグローバルではなくなったのでインポート文を追加しておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff-js\"><code class=\"language-diff-js\"><span class=\"token inserted-sign inserted language-js\"><span class=\"token prefix inserted\">+</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span></span></code></pre></div>\n<p>また、まだv3になりたてだからか有名どころのGatsby.jsのプラグインでも未対応なものが多い印象です。(gatsby-transformer-remarkとか)インストール時やビルド時に未対応である旨のwarningが出ますが自分の環境では今のところ問題なくビルドできます。</p>\n<p>自分の環境ではこの修正だけでビルドが通るようになりました。楽チン！しかしマイグレーションガイドにもあるようにv3で非推奨になりv4で削除する記法が多くありますのでさらに対応していきます。</p>\n<p>１年ほど前はステートのあるcomponentはclass記法で書いていましたがいつの間にかReact.jsに追従したのかfunction記法になっていました。以下のように修正していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class記法(v2)</span>\n<span class=\"token keyword\">export</span> defalut <span class=\"token keyword\">class</span> <span class=\"token class-name\">HogeComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blogTitle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\t  <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t    blog title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>blogTitle<span class=\"token punctuation\">}</span>\n\t  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hogeQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n\n<span class=\"token comment\">// funciton記法(v3)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span>\n\n<span class=\"token keyword\">export</span> defalut <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HogeComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blogTitle <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      blog title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>blogTitle<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hogeQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>次は<code class=\"language-text\">useStaticQuery</code>に対応します。今までは<code class=\"language-text\">gatsby-node.js</code>から直接呼ばれていたpage componentだけがgraphqlを通じてデータをfetchしていました。そこから呼ばれるcomponentへはpropsを用いたバケツリレーをしていましたが<code class=\"language-text\">useStaticQuery</code>が登場したことによりpage componentに似た記法でcomponent自身がデータをfetchできるようになりました<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStaticQuery<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FugaComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> site <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span>graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\tquery {\n\t  site {\n\t    siteMetadata {\n\t\t  title\n\t\t}\n\t  }\n\t}\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> siteTitle <span class=\"token operator\">=</span> site<span class=\"token punctuation\">.</span>sitemetadata<span class=\"token punctuation\">.</span>title\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>siteTitle<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Incremental Build</h2>\n<p><a href=\"https://www.gatsbyjs.com/docs/reference/release-notes/v3.0/#incremental-builds-in-oss\">リリースノート</a>に書いてありますが、incremental buildがデフォルトで有効化されました。<code class=\"language-text\">/.cache/</code>と<code class=\"language-text\">/public/</code>ディレクトリの内容を２回目以降のビルドで再利用するようになりビルド時間が短縮されました。デプロイフローにてこれらのキャッシュを破棄しないように修正する必要がありそうです。</p>\n<p>このブログは現状Netlifyでbuild and deployをしていますがビルドが遅いのが気になっていました。Netlifyのbuild環境はRuby/Python/Go/Rusy/Node..などなどたくさんのランタイムをインストールした後にビルドを始めるので時間がかかります、なのでGithub Actionsに乗り換えることを検討中です。</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">StaticQueryという物を利用すれば今までもcomponent自身でfetchできていたようです。知らなかった。<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2021/3/gatsby-v3.md","frontmatter":{"title":"Gatsby.jsをv3に更新した","tags":["gatsby.js"],"category":"プログラミング","fullDate":"2021-03-14"},"fields":{"lastFileUpdatedAt":"2022-09-17","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2021/3/gatsby-v3/","previous":{"excerpt":"開発検証のために本番環境ドメイン(example.com)のサブドメインに PR 名を付与した(PR-1.example.com)を staging 環境として公開した手順メモ 今回は 1 台の VPS 内に Jenkins を用い PR 数分の docker-compose コンテナ群を作り、空いている任意のポートに公開したのち Nginx を用いて{PR 名}.example.com へのアクセスを 127.0.0.1:{公開中のポート}にリバースプロキシしていきます。 概要 vps 内で稼働している DB に以下のようにサブドメインと port 番号のペアを登録しておき、これらを Nginx から読み込んでへのアクセスをへ転送する。 構成 ubuntu18.04.5 Nginx(Openresty) lua-nginx-module mysql-nginx-module MySQL…","fields":{"slug":"/2021/1/reverse_proxy/"},"frontmatter":{"date":"01/24","title":"MySQL, Nginx(Openresty)で動的リバースプロキシ","category":"プログラミング","tags":["Nginx"]}},"next":{"excerpt":"今日においてWEB APIといえばREST or GraphQLといったところですが、他にもいろいろな方式が考案され普及し衰退していったようです。そんな中でも衰退した方のSOAPのAPIを使うことになったけど日本語情報が少なくて困ったので覚書です。 SOAPはRPCの一種でネットワーク越しに何らかの関数を呼ぶような感覚で使えました。SOAPはRESTとは違い１つのエンドポイントに対して所定のXMLにて引数を組み立てPOSTなどで送ることで利用できます。 この所定のXMLですがプロトコル上人間が組み立てるのではなくライブラリが自動でXMLを生成してやり取りすることを想定しているようです。なのでライブラリにこの定義を読み込ませるためのスキーマーとしてWSDLというものがあります、中身はXML形式でリクエストやレスポンスの形式が定義されておりAPI…","fields":{"slug":"/2021/3/soap/"},"frontmatter":{"date":"03/20","title":"SOAP APIを使ったメモ","category":"プログラミング","tags":["SOAP"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}