{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2021/1/reverse_proxy/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"6c83f8d0-cdbe-52f4-9a1e-3dcece9c16a3","excerpt":"開発検証のために本番環境ドメイン(example.com)のサブドメインに PR 名を付与した(PR-1.example.com)を staging 環境として公開した手順メモ 今回は 1 台の VPS 内に Jenkins を用い PR 数分の docker-compose…","html":"<p>開発検証のために本番環境ドメイン(example.com)のサブドメインに PR 名を付与した(PR-1.example.com)を staging 環境として公開した手順メモ</p>\n<p>今回は 1 台の VPS 内に Jenkins を用い PR 数分の docker-compose コンテナ群を作り、空いている任意のポートに公開したのち Nginx を用いて{PR 名}.example.com へのアクセスを 127.0.0.1:{公開中のポート}にリバースプロキシしていきます。</p>\n<h2>概要</h2>\n<p>vps 内で稼働している DB に以下のようにサブドメインと port 番号のペアを登録しておき、これらを Nginx から読み込んで<code class=\"language-text\">PR-16.example.com</code>へのアクセスを<code class=\"language-text\">127.0.0.1:49161</code>へ転送する。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> rpx<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+-------+</span>\n<span class=\"token operator\">|</span> subdomain <span class=\"token operator\">|</span> port  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+-------+</span>\n<span class=\"token operator\">|</span> PR<span class=\"token operator\">-</span><span class=\"token number\">16</span>     <span class=\"token operator\">|</span> <span class=\"token number\">49161</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> PR<span class=\"token operator\">-</span><span class=\"token number\">17</span>     <span class=\"token operator\">|</span> <span class=\"token number\">49162</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> PR<span class=\"token operator\">-</span><span class=\"token number\">19</span>     <span class=\"token operator\">|</span> <span class=\"token number\">49164</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------+-------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>構成</h2>\n<ul>\n<li>ubuntu18.04.5</li>\n<li>Nginx(Openresty)</li>\n<li>lua-nginx-module</li>\n<li>mysql-nginx-module</li>\n<li>MySQL</li>\n</ul>\n<p>Nginx 動的リバースプロキシで検索すると Redis を用いた例が多く出てくる。今回は検証環境なのでアクセス数や処理性能は考えなくていいので手軽に MySQL にした。</p>\n<h2>手順</h2>\n<h3>Openresty のセットアップ</h3>\n<p>Nginx の config ファイル内に Lua を用いて MySQL へのアクセス処理を記述する。通常の<code class=\"language-text\">apt install nginx</code>でインストールできる Nignx には lua-module が含まれていないので自分で Nginx をビルドし直すか諸モジュールが含まれる Openresty ビルド版をインストールする必要がある。今回は既存の Nginx を止め Openresty をインストールした。手順は<a href=\"https://openresty.org/en/linux-packages.html#ubuntu\">Openresty document</a></p>\n<p>この VPS では別の web アプリケーションを動かしていたので、その設定を Nginx から引き継ぐために Openresty の設定を変更する。<code class=\"language-text\">/usr/local/openresty/nginx/conf/nginx.conf</code>が最初に読み込まれる設定ファイル。デフォルトの設定のうち必要ない server 部をコメントアウトし、既存の Nignx の設定を読みにいくように末尾に<code class=\"language-text\">include /usr/local/openresty/nginx/conf/conf.d/*.conf;</code>を書き加えシンボリックリンクを貼る</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>/usr/local/openresty/nginx/conf/nginx.conf</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff-conf\"><code class=\"language-diff-conf\">~~~~\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   # HTTPS server\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   #\n<span class=\"token prefix inserted\">+</span>   #server {\n<span class=\"token prefix inserted\">+</span>   #    listen       443 ssl;\n<span class=\"token prefix inserted\">+</span>   #    server_name  localhost;\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>   #    ssl_certificate      cert.pem;\n<span class=\"token prefix inserted\">+</span>   #    ssl_certificate_key  cert.key;\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>   #    ssl_session_cache    shared:SSL:1m;\n<span class=\"token prefix inserted\">+</span>   #    ssl_session_timeout  5m;\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>   #    ssl_ciphers  HIGH:!aNULL:!MD5;\n<span class=\"token prefix inserted\">+</span>   #    ssl_prefer_server_ciphers  on;\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>   #    location / {\n<span class=\"token prefix inserted\">+</span>   #        root   html;\n<span class=\"token prefix inserted\">+</span>   #        index  index.html index.htm;\n<span class=\"token prefix inserted\">+</span>   #    }\n<span class=\"token prefix inserted\">+</span>   #}\n<span class=\"token prefix inserted\">+</span>   include /usr/local/openresty/nginx/conf/conf.d/*.conf;\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}\n</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /etc/nginx/conf.d /usr/local/openresty/nginx/conf/conf.d/</code></pre></div>\n<p>設定変更後 Openresty を有効化して動作を確認する。</p>\n<h3>MySQL の準備</h3>\n<p>subdomain と port の対応を示すための DB を作りアクセスする用のユーザーも作る</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">database</span> databasename<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">by</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ON</span> databasename<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'username'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tablename<span class=\"token punctuation\">(</span>subdomain <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> port <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nginx からは DB の読みとり権限だけ必要なので当該ユーザーに SELECT 権限を与えておきます。別途転送したいサブドメインと port 番号を insert する処理を作っておきましょう。</p>\n<h3>Nginx の設定ファイルへの Lua スクリプトの記述</h3>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>/etc/nginx/conf.d/hoge.conf</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server{\nlisten 443 ssl;\n\tserver_name ~^(?&lt;subdomain&gt;[^\\.]+).example.com$;\n\tlocation / {\n\t\tproxy_set_header X-Forwarded-Host $host:$server_port;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tset $localport &quot;&quot;;\n\t\trewrite_by_lua &#39;\n\t\t\tlocal mysql = require &quot;resty.mysql&quot;\n\n\t\t\tlocal db, err = mysql:new()\n\t\t\tif not db then\n\t\t\t\tngx.say(&quot;failed to instantiate mysql: &quot;, err)\n\t\t\t\treturn\n\t\t\tend\n\t\t\tlocal ok, err, errcode, sqlstate = db:connect{\n\t\t\t\thost = &quot;127.0.0.1&quot;,\n\t\t\t\tport = 3306,\n\t\t\t\tdatabase = &quot;databasename&quot;,\n\t\t\t\tuser = &quot;username&quot;,\n\t\t\t\tpassword = &quot;password&quot;,\n\t\t\t\tcharset = &quot;utf8&quot;,\n\t\t\t\tmax_packet_size = 1024 * 1024,\n\t\t\t}\n\t\t\tif not ok then\n\t\t\t\tngx.log(ngx.ERR, &quot;failed to connect: &quot;, err, &quot;: &quot;, errcode, &quot; &quot;, sqlstate)\n\t\t\t\treturn ngx.exit(500)\n\t\t\tend\n\n\t\t\tres, err, errcode, sqlstate = db:query(&quot;select port from tablename where subdomain = \\&#39;&quot; ..ngx.var.subdomain.. &quot;\\&#39; limit 1;&quot;)\n\t\t\tif not res then\n\t\t\t\tngx.log(ngx.ERR, &quot;bad result #1: &quot;, err, &quot;: &quot;, errcode, &quot;: &quot;, sqlstate, &quot;.&quot;)\n\t\t\t\treturn ngx.exit(404)\n\t\t\telse\n\t\t\t\tngx.var.localport = res[1][&quot;port&quot;]\n\t\t\tend\n\t\t&#39;;\n\t\tproxy_pass http://127.0.0.1:$localport;\n\t\tbreak;\n\t}\n}</code></pre></div>\n<p>server 部の server_name で<code class=\"language-text\">~^(?&lt;subdomain>[^\\.]+).example.com$;</code>としてサブドメインに subdomain という名前をつけてマッチしておくと後続の処理で変数として利用することができる。</p>\n<p>lua から Nginx conf の変数を参照・代入することができる。しかし lua で新しい変数を宣言することはできないので先に変数<code class=\"language-text\">localport</code>を宣言しておくと lua から<code class=\"language-text\">ngx.env.localport</code>でアクセスできる。</p>\n<p>db:query()に SQL クエリを入れて実行する。Lua の結合演算子<code class=\"language-text\">..</code>を利用できます。クエリの実行結果は<code class=\"language-text\">res</code>に２次元の配列(table)で返却されます。Lua は 1 based index な言語なので最初の要素の index は 1 です、クエリに<code class=\"language-text\">limit 1</code>をかけているので<code class=\"language-text\">res[1]['port']</code>で転送すべき port 番号が分かります。なのでこの番号に<code class=\"language-text\">proxy_pass</code>すれば OK です。</p>\n<h2>おまけ</h2>\n<p>サブドメインが可変なので https にするには毎回発行・無効化せずワイルドカード証明書を当てておきます。ワイルドカード証明書は DNS 認証しかできないので</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot certonly <span class=\"token punctuation\">\\</span>\n  --manual <span class=\"token punctuation\">\\</span>\n  --domain *.example.com <span class=\"token punctuation\">\\</span>\n  --email mail@example.com <span class=\"token punctuation\">\\</span>\n  --agree-tos <span class=\"token punctuation\">\\</span>\n  --manual-public-ip-logging-ok <span class=\"token punctuation\">\\</span>\n  --preferred-challenges dns</code></pre></div>\n<p>表示された文字列をネームサーバの TXT レコードに登録し認証すれば OK。</p>\n<p>自動更新するにはネームサーバーのレコード登録を自動化する必要があり外部 API に対応したネームサーバにすると良さそうです。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://blog.ssrf.in/post/2017-08-09-dynamic-reverse-proxy-with-nginx/\">https://blog.ssrf.in/post/2017-08-09-dynamic-reverse-proxy-with-nginx/</a></li>\n<li><a href=\"https://github.com/openresty/lua-nginx-module\">https://github.com/openresty/lua-nginx-module</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-mysql\">https://github.com/openresty/lua-resty-mysql</a></li>\n</ul>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2021/1/reverse_proxy.md","frontmatter":{"title":"MySQL, Nginx(Openresty)で動的リバースプロキシ","tags":["Nginx"],"category":"プログラミング","fullDate":"2021-01-24"},"fields":{"lastFileUpdatedAt":"2022-09-17","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2021/1/reverse_proxy/","previous":{"excerpt":"イベントについて 先週Bug Shooting Challenge #5 ONLINEに参加させてただきました。 問題の背景としては、すでにリリースされているwebゲームのCREチームとして配属され、ユーザーからのお問い合わせや社内の調査チームからの報告を元にバグを探していくというものです。 お題のゲームはRailsで作られており、コードとdocker-compose.ymlが入ったgitリポジトリーを渡されます。さらに、サーバーのログがBigQueryに蓄積されているので、参考にできます。 問題は全3問あり、ペアでチームを組みそれぞれで問題に取り掛かります。ログを解析をした経験もBigQuery…","fields":{"slug":"/2020/12/bug-shooting-challenge/"},"frontmatter":{"date":"12/24","title":"Bug Shooting Challenge #5 ONLINEに参加させていただきました","category":"日記","tags":["参加レポ"]}},"next":{"excerpt":"2021年3月にGatsby.jsのv3がリリースされました、多少の破壊的な変更はあるもののv1からv2の時ほどの苦労はなくアップデートできた気がします。 いくつか進化がありますが、一番にビルド速度が一段と早くなった気がします。HotReloadが特に早くなりエディタからブラウザに画面を切り替えるとすでにリロードされており待ち時間が無くなっているように感じます、すごい。さらにはブラウザ上にエラーメッセージがモーダルでしっかり表示されるようになりました。これで開発も一段と楽になった気がします。また、いよいよincremental buildが正式に使えるようになりました。deployにかかる時間が大幅に短縮されるのではないでしょうか。 v2からv3への更新にあたっていくつかの破壊的な更新があるため多少修正しないとビルドが通りませんでした。内容は公式のマイグレーションガイドに従えばOK…","fields":{"slug":"/2021/3/gatsby-v3/"},"frontmatter":{"date":"03/14","title":"Gatsby.jsをv3に更新した","category":"プログラミング","tags":["gatsby.js"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}