{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2019/11/dino/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"8ca527a9-6151-5445-bfb2-0c630aa3235e","excerpt":"google chrome…","html":"<p>google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。</p>\n<p>さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。</p>\n<p>ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。</p>\n<p>この恐竜はネットワークに問題がある時に加えて、chromeで<code class=\"language-text\">chrome://dino</code>にアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。</p>\n<p>ちなみにネットワークエラーの時には小さいdinoくんですが<code class=\"language-text\">chrome://dino</code>で表示したdinoくんは画面幅一杯まで拡大され、大きいdinoくんに浸ることができます。</p>\n<h2>google Chromeについて</h2>\n<p>Chromeはgoogleが開発しているブラウザーであり、クローズドソースで開発しています。同じくgoogleが中心となって開発しているchromiumをベースにしています。OSSでない部分をgoogleが付け足したのがchromeのようです。次世代のEdgeと同じですね。</p>\n<p>chromiumは大半がBSDライセンスですが、MITライセンスなどなど物によってライセンスが異なるmixed licenseだそうです。</p>\n<p>さてここで問題のdinoくんですが、こちらはchromiumに搭載されているものであり、BSDライセンスが適用されています。著作権表示や許諾表示をすれば自由に個人利用、商業利用も可能ですね。やったね。</p>\n<p>chromiumに内包されているdinoくんですがこれはOSSなので実装を覗くことができますね。それではdinoくんの中身を見てみましょう。</p>\n<h2>dinoくんの実装</h2>\n<p>chromiumはgithub上でミラーされたコードを見ることができます、それっぽいファイル名を探していたらdinoくんの<a href=\"https://github.com/chromium/chromium/blob/master/components/neterror/resources/offline.js\">実装部分</a>を見つけました、Javascriptで実装されていますね。ここにもBSDライセンスであることが明記されています。</p>\n<p>余談ですが、chrome10周年を記念してバースデーケーキと帽子のアイテムが<a href=\"https://github.com/chromium/chromium/commit/693b9fcac0ff52f6653c0a27815d39fd077856a4#diff-0e1aac1740e5d99418a0adeb215044bb\">追加</a>されたことがありました。今は該当部分の実装は無くなっています。</p>\n<h2>ライセンス</h2>\n<p>ということでdinoくんはBSDライセンスということで大丈夫そうです。とりあえず自分用にdinoくんトートバックでも作ろうかな。</p>\n<h2>おまけ</h2>\n<p>この記事を書くためにdinoくんを眺めていたらdinoくんの描画の<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1028467\">バグ</a>を見つけたのでchromium issueに投げてみました、このてのコミュニティーにissueを投げるのは初めてで投稿カテゴリーを間違えてポストしてしまいましたが管理されているgoogleの社員の方に半日ほどで修正していただき、それから24時間しない間にdinoを実装された方からコメントがつきました。</p>\n<p>Chromiumというとても大きなプロジェクトで、優先度がかなり低いバグでも2日かからないくらいで修正に取りかかるのはすごいと思いました。さすがですね。</p>\n<p>おしまい。</p>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2019/11/dino.md","frontmatter":{"title":"Chromeのティラノサウルスについて調べた","tags":["Chrome","OSS"],"category":"プログラミング","fullDate":"2019-11-22"},"fields":{"lastFileUpdatedAt":"2022-09-21","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2019/11/dino/","previous":{"excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","fields":{"slug":"/2019/09/dotz/"},"frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]}},"next":{"excerpt":"Emacsのパッケージマネージャーのuse-package.elにはパッケージインストールの他に任意のタイミングで評価させるキーワードというものがありますが、自分はこれをよく分からず使っているので調べてまとめます。 実行タイミング 評価の順番はこうなります パッケージ名の実在確認    パッケージをロード パッケージをロード  インストールするパッケージの設定を記述するためのキーワードです。 :preface 条件分岐キーワードを同時に使用していた時でも、条件分岐よりも先に評価されます。つまり、指定したパッケージ名が実在するならば真っ先に必ず評価してくれます。 :init パッケージが読み込まれる前に評価されます。遅延キーワードの影響を受けません。 :config 当該のパッケージが読み込まれた後に評価されます。initに比べ、config…","fields":{"slug":"/2019/12/use-package/"},"frontmatter":{"date":"12/02","title":"use-packageについてまとめる","category":"プログラミング","tags":["emacs","use-package"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}