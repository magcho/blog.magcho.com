{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2020/6/gitignore/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"5e644623-9cf8-59a4-a014-9a560b69f27a","excerpt":"demo asciicast gitignoreを言語とに自動生成してくれるサービスはいくつかありますが、わざわざwebサイトを開くのも面倒です。\n幸いなことにgitignore.ioがapiを提供してくれています、これを利用してgit…","html":"<h2>demo</h2>\n<p><a href=\"https://asciinema.org/a/339422\"><img src=\"https://asciinema.org/a/339422.svg\" alt=\"asciicast\"></a></p>\n<p>gitignoreを言語とに自動生成してくれるサービスはいくつかありますが、わざわざwebサイトを開くのも面倒です。\n幸いなことにgitignore.ioがapiを提供してくれています、これを利用してgitにサブコマンドを追加しましょう。</p>\n<p>ついでに.gitignoreを上書き・追記の確認・gitignore.ioにテンプレートが存在しない場合はエラーを表示などもあると親切ですね。shにするとこんな感じに。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -Ls http://gitignore.io/api/$1\t-w <span class=\"token string\">'http_code=%{http_code}'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'list'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$RES</span>\"</span>\n\t<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">200</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${RES<span class=\"token operator\">##</span>*http_code=}</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f .gitignore <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\".gitignore already exits. Append ? [y/N/o]: \"</span>\n\t\t<span class=\"token builtin class-name\">read</span> ANS\n\t\t<span class=\"token keyword\">case</span> <span class=\"token variable\">$ANS</span> <span class=\"token keyword\">in</span>\n\t\t\t<span class=\"token punctuation\">[</span>Yy<span class=\"token punctuation\">]</span>*<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Append'</span>\n\t\t\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${RES<span class=\"token operator\">%%</span>http_code*}</span>\"</span> <span class=\"token operator\">>></span> .gitignore\n\t\t\t\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token string\">\"\"</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>Nn<span class=\"token punctuation\">]</span>*<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Cancel'</span>\n\t\t\t\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">[</span>Oo<span class=\"token punctuation\">]</span>*<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Overwrid'</span>\n\t\t\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${RES<span class=\"token operator\">%%</span>http_code*}</span>\"</span> <span class=\"token operator\">></span> .gitignore\n\t\t\t\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\t     <span class=\"token keyword\">esac</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Created .gitignore'</span>\n\t\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${RES<span class=\"token operator\">%%</span>http_code*}</span>\"</span> <span class=\"token operator\">></span> .gitignore\n\t<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">else</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span> is undefined.\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>.gitconfigに書くとときには全体を関数にする・ダブルクォーテーションをエスケープ・<code class=\"language-text\">echo -n</code>が使えないので<code class=\"language-text\">printf</code>に差し替えなどをすると以下になります。</p>\n<p>書いていて気づいたんですが、#はエスケープせずに動きますね。</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>.gitconfig</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># gitignoreの言語別セットを自動生成</span>\n  ignore = \"<span class=\"token tag\">!f()</span><span class=\"token punctuation\">{</span> RES=$(curl <span class=\"token punctuation\">-</span>Ls http<span class=\"token punctuation\">:</span>//gitignore.io/api/$1  <span class=\"token punctuation\">-</span>w 'http_code=%<span class=\"token punctuation\">{</span>http_code<span class=\"token punctuation\">}</span>'); if <span class=\"token punctuation\">[</span> \\\"$1\\\" = 'list' <span class=\"token punctuation\">]</span>; then echo \\\"$RES\\\";exit 0; fi; if <span class=\"token punctuation\">[</span> 200 = \\\"$<span class=\"token punctuation\">{</span>RES<span class=\"token comment\">##*http_code=}\\\" ]; then if [ -f .gitignore ]; then printf  \\\".gitignore already exits. Append ? [y/N/o]: \\\";read ANS;case $ANS in [Yy]*) echo 'Append';echo \\\"${RES%%http_code*}\\\" >> .gitignore;;\\\"\\\" | [Nn]*)echo 'Cancel';;[Oo]*)echo 'Overwride';echo \\\"${RES%%http_code*}\\\" > .gitignore;;esac;else echo \\\"${RES%%http_code*}\\\" > .gitignore;fi;else echo \\\"$1 is undefined.\\\" ;fi;};f \"</span></code></pre></div>\n<h2>使い方</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> ignore <span class=\"token punctuation\">[</span>language<span class=\"token punctuation\">]</span>\n<span class=\"token function\">git</span> ignore java\n<span class=\"token function\">git</span> ignore node,stylus</code></pre></div>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2020/6/gitignore.md","frontmatter":{"title":".gitignoreを自動生成するサブコマンドを作ろう","tags":["git"],"category":"プログラミング","fullDate":"2020-06-14"},"fields":{"lastFileUpdatedAt":"2022-09-21","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2020/6/gitignore/","previous":{"excerpt":"gulp-sharp で画像のリサイズをしたい時にできなかったので自分でそれっぽいのを書いた。 フロントエンドで画像を扱う時にsrcディレクトリには元の大きさの画像を用意してdistディレクトリには適切なサイズまで小さくして公開する運用をしている。 自分は欲しい大きさにresizeしてからoptimiseをしています、gulpでのresizeで一番npmでダウンロード数が多いのはgulp-image-resizeです。このライブラリはGraphicsMagick か ImageMagickまたはその両方を必要とします。CIでサイトをビルドする時にこれらがインストールされていないときは自分でapt等でインストールをする必要がありますが、ciの制約でインストールができなかったのでsharpを使ってresizeさせたかった。 探すとgulp-sharp…","fields":{"slug":"/2020/5/gulp-sharp/"},"frontmatter":{"date":"05/04","title":"GulpでSharpを使って画像のリサイズをする","category":"プログラミング","tags":["Gulp"]}},"next":{"excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。 keymap.cにテンキーレイヤーを追加する レイヤー定義はに書き込みます。 レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lower…","fields":{"slug":"/2020/6/lily58-add-layer/"},"frontmatter":{"date":"06/20","title":"Lily58にレイヤーを追加する","category":"プログラミング","tags":["lily58","自作キーボード"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}