{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2020/6/lily58-add-layer/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"8cce7e55-237e-55ab-8596-4f79a64622cd","excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの…","html":"<p>自分は <a href=\"https://yuchi-kbd.hatenablog.com/entry/2018/12/23/214342\">Lily58 Pro</a> という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。</p>\n<p>Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。</p>\n<h2>keymap.cにテンキーレイヤーを追加する</h2>\n<p>レイヤー定義は<code class=\"language-text\">keymap.c</code>に書き込みます。</p>\n<p>レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lowerは押している時だけレイヤーを切り替える方式です。そのレイヤーのキーを１つタイプするだけならば便利な方式ですが、テンキーレイヤー等では連続して数値を入力し続けたいことがほとんどなので今回は一回押したらレイヤーを切り替え、もう一度押すとレイヤーが戻るtoggle方式にしました。</p>\n<p>まず、以下のようにNUMBERレイヤーを定義します。</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>keymap.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff-c\"><code class=\"language-diff-c\"><span class=\"token unchanged language-c\"><span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_QWERTY</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_LOWER</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_RAISE</span> <span class=\"token expression\"><span class=\"token number\">2</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ADJUST</span> <span class=\"token expression\"><span class=\"token number\">3</span></span></span>\n</span><span class=\"token inserted-sign inserted language-c\"><span class=\"token prefix inserted\">+</span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_NUMBER</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span></span></code></pre></div>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>keymap.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff-c\"><code class=\"language-diff-c\">\t[_ADJUST] =\n\t\tLAYOUT(XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                   XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,\\\n\t\tXXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                   XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,\\\n\t\tXXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                   XXXXXXX, XXXXXXX, RGB_TOG, RGB_HUI, RGB_SAI, RGB_VAI,\\\n\t\tXXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, RGB_MOD, RGB_HUD, RGB_SAD, RGB_VAD,\\\n\t\t_______, _______, _______, _______, _______, _______, _______, _______),\n\n\n<span class=\"token inserted-sign inserted language-c\"><span class=\"token prefix inserted\">+</span><span class=\"token comment\">/* NUMBER\n<span class=\"token prefix inserted\">+</span>     * ,-----------------------------------------.                    ,-----------------------------------------.\n<span class=\"token prefix inserted\">+</span>     * |      |      |      |      |      |      |                    |      |      |      |      |      |      |\n<span class=\"token prefix inserted\">+</span>     * |------+------+------+------+------+------|                    |------+------+------+------+------+------|\n<span class=\"token prefix inserted\">+</span>     * |      |      |      |      |      |      |                    |      |   7  |   8  |   9  |BSPACE|      |\n<span class=\"token prefix inserted\">+</span>     * |------+------+------+------+------+------|                    |------+------+------+------+------+------|\n<span class=\"token prefix inserted\">+</span>     * |      |      |      |      |      |      |-------.    ,-------|   =  |   4  |   5  |   6  |   +  |      |\n<span class=\"token prefix inserted\">+</span>     * |------+------+------+------+------+------|       |    |NUMBER |------+------+------+------+------+------|\n<span class=\"token prefix inserted\">+</span>     * |      |      |      |      |      |      |-------|    |-------|   0  |   1  |   2  |   3  |   -  |      |\n<span class=\"token prefix inserted\">+</span>     * `-----------------------------------------/       /     \\      \\-----------------------------------------'\n<span class=\"token prefix inserted\">+</span>     *                   | LAlt | LGUI |LOWER | /Space  /       \\Enter \\  |RAISE |BackSP| RGUI |\n<span class=\"token prefix inserted\">+</span>     *                   |      |      |      |/       /         \\      \\ |      |      |      |\n<span class=\"token prefix inserted\">+</span>     *                   `----------------------------'           '------''--------------------'\n<span class=\"token prefix inserted\">+</span>\t\t */</span>\n<span class=\"token prefix inserted\">+</span>\t <span class=\"token punctuation\">[</span>_NUMBER<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"token prefix inserted\">+</span>\t\t <span class=\"token function\">LAYOUT</span><span class=\"token punctuation\">(</span>_______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>                   _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>\\\n<span class=\"token prefix inserted\">+</span>\t\t _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>                   KC_PDOT<span class=\"token punctuation\">,</span> KC_P7<span class=\"token punctuation\">,</span>   KC_P8<span class=\"token punctuation\">,</span>   KC_P9<span class=\"token punctuation\">,</span>   KC_BSPC<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>\\\n<span class=\"token prefix inserted\">+</span>\t\t _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>                   KC_PEQL<span class=\"token punctuation\">,</span> KC_P4<span class=\"token punctuation\">,</span>   KC_P5<span class=\"token punctuation\">,</span>    KC_P6<span class=\"token punctuation\">,</span>  KC_PPLS<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>\\\n<span class=\"token prefix inserted\">+</span>\t\t _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span> KC_P0<span class=\"token punctuation\">,</span>   KC_P1<span class=\"token punctuation\">,</span>   KC_P2<span class=\"token punctuation\">,</span>   KC_P3<span class=\"token punctuation\">,</span>   KC_PMNS<span class=\"token punctuation\">,</span> _______<span class=\"token punctuation\">,</span>\\\n<span class=\"token prefix inserted\">+</span>\t\t KC_LSFT<span class=\"token punctuation\">,</span> KC_LGUI<span class=\"token punctuation\">,</span> LOWER<span class=\"token punctuation\">,</span> KC_SPC<span class=\"token punctuation\">,</span> KC_ENT<span class=\"token punctuation\">,</span> RAISE<span class=\"token punctuation\">,</span> KC_RGUI<span class=\"token punctuation\">,</span> KC_RALT<span class=\"token punctuation\">)</span>\n</span>);</code></pre></div>\n<p>NUMBERレイヤーへtoggleするためのキーをQWERTYレイヤーに定義します。右手側の一番左の１つだけ横に出ているキーに割り当てます。</p>\n<p><code class=\"language-text\">TG(レイヤー番号)</code>のように割り当て、切り替え先のレイヤーには<code class=\"language-text\">KC_TRANSPARENT</code>かそのエイリアスである<code class=\"language-text\">_______</code>を割り当ておきます。</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>keymap.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* QWERTY\n\t * ,-----------------------------------------.                    ,-----------------------------------------.\n\t * |  `   |   1  |   2  |   3  |   4  |   5  |                    |   6  |   7  |   8  |   9  |   0  |BSPACE|\n\t * |------+------+------+------+------+------|                    |------+------+------+------+------+------|\n\t * | Tab  |   Q  |   W  |   E  |   R  |   T  |                    |   Y  |   U  |   I  |   O  |   P  |BSPACE|\n\t * |------+------+------+------+------+------|                    |------+------+------+------+------+------|\n\t * |LCTRL |   A  |   S  |   D  |   F  |   G  |-------.    ,-------|   H  |   J  |   K  |   L  |   ;  |  '   |\n\t * |------+------+------+------+------+------|CSLOCK |    |NUMBER |------+------+------+------+------+------|\n\t * | LAlt |   Z  |   X  |   C  |   V  |   B  |-------|    |-------|   N  |   M  |   ,  |   .  |   /  |RShift|\n\t * `-----------------------------------------/       /     \\      \\-----------------------------------------'\n\t *                   |Lshift| LGUI |LOWER | /Space  /       \\Enter \\  |RAISE | RGUI | RAlt |\n\t *                   |      |      |      |/       /         \\      \\ |      |      |      |\n\t *                   `----------------------------'           '------''--------------------'\n\t */</span>\n\n    <span class=\"token punctuation\">[</span>_QWERTY<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n\t<span class=\"token function\">LAYOUT</span><span class=\"token punctuation\">(</span>KC_GRV<span class=\"token punctuation\">,</span> KC_1<span class=\"token punctuation\">,</span> KC_2<span class=\"token punctuation\">,</span> KC_3<span class=\"token punctuation\">,</span> KC_4<span class=\"token punctuation\">,</span> KC_5<span class=\"token punctuation\">,</span> KC_6<span class=\"token punctuation\">,</span> KC_7<span class=\"token punctuation\">,</span> KC_8<span class=\"token punctuation\">,</span> KC_9<span class=\"token punctuation\">,</span> KC_0<span class=\"token punctuation\">,</span> SUSHI<span class=\"token punctuation\">,</span>\\\n\t\tKC_TAB<span class=\"token punctuation\">,</span> KC_Q<span class=\"token punctuation\">,</span> KC_W<span class=\"token punctuation\">,</span> KC_E<span class=\"token punctuation\">,</span> KC_R<span class=\"token punctuation\">,</span> KC_T<span class=\"token punctuation\">,</span> KC_Y<span class=\"token punctuation\">,</span> KC_U<span class=\"token punctuation\">,</span> KC_I<span class=\"token punctuation\">,</span> KC_O<span class=\"token punctuation\">,</span> KC_P<span class=\"token punctuation\">,</span> KC_MINS<span class=\"token punctuation\">,</span>\\\n\t\tKC_LCTRL<span class=\"token punctuation\">,</span> KC_A<span class=\"token punctuation\">,</span> KC_S<span class=\"token punctuation\">,</span> KC_D<span class=\"token punctuation\">,</span> KC_F<span class=\"token punctuation\">,</span> KC_G<span class=\"token punctuation\">,</span> KC_H<span class=\"token punctuation\">,</span> KC_J<span class=\"token punctuation\">,</span> KC_K<span class=\"token punctuation\">,</span> KC_L<span class=\"token punctuation\">,</span> KC_SCLN<span class=\"token punctuation\">,</span> KC_QUOT<span class=\"token punctuation\">,</span>\\\n\t\tKC_LALT<span class=\"token punctuation\">,</span> KC_Z<span class=\"token punctuation\">,</span> KC_X<span class=\"token punctuation\">,</span> KC_C<span class=\"token punctuation\">,</span> KC_V<span class=\"token punctuation\">,</span> KC_B<span class=\"token punctuation\">,</span> KC_CAPS<span class=\"token punctuation\">,</span> <span class=\"token function\">TG</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> KC_N<span class=\"token punctuation\">,</span> KC_M<span class=\"token punctuation\">,</span> KC_COMM<span class=\"token punctuation\">,</span> KC_DOT<span class=\"token punctuation\">,</span> KC_SLSH<span class=\"token punctuation\">,</span> KC_RSFT<span class=\"token punctuation\">,</span> \\\n\t\tKC_LSFT<span class=\"token punctuation\">,</span> KC_LGUI<span class=\"token punctuation\">,</span> LOWER<span class=\"token punctuation\">,</span> KC_SPC<span class=\"token punctuation\">,</span> KC_ENT<span class=\"token punctuation\">,</span> RAISE<span class=\"token punctuation\">,</span> KC_RGUI<span class=\"token punctuation\">,</span> KC_RALT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>これでNUMBERレイヤーが動作します。</p>\n<h2>3層目のレイヤーを使う</h2>\n<p><a href=\"https://docs.qmk.fm/#/feature_layers\">qmk firmwareのドキュメント</a> にもありますがレイヤーは階層構造を持ち<code class=\"language-text\">KC_TRANSPARENT</code>で下のレイヤーを透過的に利用できます。</p>\n<p>自分はRaizeレイヤーに矢印キーを割り当てているのでNUMBERレイヤーの時にLOWERキーを押したらLOWERレイヤーに一時的に切り替わってくれると嬉しいです。\nつまり、QWERTY -> NUMBER -> LOWER とレイヤーを変化されているのでQWERTYから数えて3層目のレイヤーです。</p>\n<p>Lily58ではQERTYレイヤ状態でLOWERキー押下時に<code class=\"language-text\">layer_on(_LOWER)</code>でレイヤーを切り替えています。この関数の実装上今回のケースでは期待しない動作になります。\n今回はRaise/Lowerキーの押下/押上時に処理を追加して対応します。</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>keymap.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> bool prelayer_numberlayer <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">process_record_user</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> keycode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">keyrecord_t</span> <span class=\"token operator\">*</span>record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> LOWER<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tis_prelayer_numberlayer <span class=\"token operator\">=</span> <span class=\"token function\">layer_state_is</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">layer_off</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">layer_on</span><span class=\"token punctuation\">(</span>_LOWER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">update_tri_layer_RGB</span><span class=\"token punctuation\">(</span>_LOWER<span class=\"token punctuation\">,</span> _RAISE<span class=\"token punctuation\">,</span> _ADJUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">layer_off</span><span class=\"token punctuation\">(</span>_LOWER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">update_tri_layer_RGB</span><span class=\"token punctuation\">(</span>_LOWER<span class=\"token punctuation\">,</span> _RAISE<span class=\"token punctuation\">,</span> _ADJUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_prelayer_numberlayer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">layer_on</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token keyword\">case</span> RAISE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tis_prelayer_numberlayer <span class=\"token operator\">=</span> <span class=\"token function\">layer_state_is</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">layer_off</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">layer_on</span><span class=\"token punctuation\">(</span>_RAISE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">update_tri_layer_RGB</span><span class=\"token punctuation\">(</span>_LOWER<span class=\"token punctuation\">,</span> _RAISE<span class=\"token punctuation\">,</span> _ADJUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">layer_off</span><span class=\"token punctuation\">(</span>_RAISE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">update_tri_layer_RGB</span><span class=\"token punctuation\">(</span>_LOWER<span class=\"token punctuation\">,</span> _RAISE<span class=\"token punctuation\">,</span> _ADJUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_prelayer_numberlayer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">layer_on</span><span class=\"token punctuation\">(</span>_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上の実装で3層目のレイヤーも期待する動作になります。</p>\n<h2>OLEDに表示されるレイヤー名を修正する</h2>\n<p>Lily58のオプションで付けられるOLEDにはレイヤー名や入力履歴等が表示されています。OLED周りの実装はlibに入っています。ここに直接手を加えていきます。</p>\n<p>レイヤー名の表示はkeymap.cの<code class=\"language-text\">read_layer_state()</code>で呼び出されています。</p>\n<p>この関数の実装にNUMBERレイヤーに関する記述をすると</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>lib/layer_state_reader.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff-c\"><code class=\"language-diff-c\"><span class=\"token unchanged language-c\"><span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L_BASE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L_LOWER</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L_RAISE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L_ADJUST</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L_ADJUST_TRI</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>L_ADJUST <span class=\"token operator\">|</span> L_RAISE <span class=\"token operator\">|</span> L_LOWER<span class=\"token punctuation\">)</span></span></span>\n</span><span class=\"token inserted-sign inserted language-c\"><span class=\"token prefix inserted\">+</span><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">L_NUMBER</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></span></span></span></code></pre></div>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>lib/layer_state_reader.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff-c\"><code class=\"language-diff-c\"><span class=\"token unchanged language-c\"><span class=\"token prefix unchanged\"> </span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">read_layer_state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token prefix unchanged\"> </span>   <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>layer_state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"token inserted-sign inserted language-c\"><span class=\"token prefix inserted\">+</span>        <span class=\"token keyword\">case</span> L_NUMBER<span class=\"token operator\">:</span>\n<span class=\"token prefix inserted\">+</span>            <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>layer_state_str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>layer_state_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Layer: Number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token prefix inserted\">+</span>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token unchanged language-c\"><span class=\"token prefix unchanged\"> </span>       <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n<span class=\"token prefix unchanged\"> </span>           <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>layer_state_str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>layer_state_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Layer: Undef-%ld\"</span><span class=\"token punctuation\">,</span> layer_state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token prefix unchanged\"> </span>   <span class=\"token punctuation\">}</span>\n</span>\n<span class=\"token unchanged language-c\"><span class=\"token prefix unchanged\"> </span>   <span class=\"token keyword\">return</span> layer_state_str<span class=\"token punctuation\">;</span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>これでOLEDにLayer: Numberと表示されるようになります。めでたしめでたし。</p>\n<h2>おまけ</h2>\n<p>qmkではレイヤーの状態を<code class=\"language-text\">unit32_t layer_state</code> で保持し、下位ビットから順にレイヤー1・レイヤー2を割り当ててそのビットが立っているかどうかを判定しているらしい。</p>\n<p><code class=\"language-text\">layer_on(LAYER)</code>は指定したビットを立てるわけではなく、現在の<code class=\"language-text\">layer_state</code>を左に指定量ビットシフトしている。確かに<code class=\"language-text\">keymap.c</code>で<code class=\"language-text\">#define _NUMBER 4</code>を定義しましたね。当然<code class=\"language-text\">layer_off(LAYER)</code>は右に指定量ビットシフトです。</p>\n<p>今までLily58にFWを書き込む時には繋いでるTRRSを抜いて書き込んでいたのですが、軽く調べた感じ繋ぎっぱなしで書き込んで問題なさそう(私は設計者ではないので信憑性のない情報)\n<a href=\"https://github.com/kata0510/Lily58/tree/master/Pro/PCB\">回路図</a> を見た感じUSBの通信線とは別のピンでPro Micro同士を繋いでいます。TRRSのアサインは先端からUSBからのVCC/GND/通信線/NCっぽい。ProMicroの仕様書をざっと見た感じFW書き込み時にシリアルピンは影響なさそうなのでTRRSを抜かずに書き込めそうです。</p>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2020/6/lily58-add-layer.md","frontmatter":{"title":"Lily58にレイヤーを追加する","tags":["lily58","自作キーボード"],"category":"プログラミング","fullDate":"2020-06-20"},"fields":{"lastFileUpdatedAt":"2022-09-17","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2020/6/lily58-add-layer/","previous":{"excerpt":"demo asciicast gitignoreを言語とに自動生成してくれるサービスはいくつかありますが、わざわざwebサイトを開くのも面倒です。\n幸いなことにgitignore.ioがapiを提供してくれています、これを利用してgitにサブコマンドを追加しましょう。 ついでに.gitignoreを上書き・追記の確認・gitignore.ioにテンプレートが存在しない場合はエラーを表示などもあると親切ですね。shにするとこんな感じに。 .gitconfigに書くとときには全体を関数にする・ダブルクォーテーションをエスケープ・が使えないのでに差し替えなどをすると以下になります。 書いていて気づいたんですが、#はエスケープせずに動きますね。 使い方","fields":{"slug":"/2020/6/gitignore/"},"frontmatter":{"date":"06/14","title":".gitignoreを自動生成するサブコマンドを作ろう","category":"プログラミング","tags":["git"]}},"next":{"excerpt":"Chatworkさんの2020年夏のインターンシップのフロントエンドコースに参加させていただきましたレポ。オンライン開催ということでどんな３週間になるのかと不安と期待でいっぱいでしたがとても楽しくたくさんのことを得られたと感じています。 この手のエントリーは守秘義務契約に違反してしまいそうで避けていたのですが、自分が実際にエントリーするときに過去の参加者のレポを参考しましたし、これも誰かの参考になればと思いレポします。 Chatworkさんのインターンシップ自体が2019年に初めて行われ、内容はバックエンド(Scala)のコースのみだったようです。２回目となる2020年には去年に引き続きバックエンドと合わせてフロントエンドコース(React.js…","fields":{"slug":"/2020/11/intern_rep/"},"frontmatter":{"date":"11/08","title":"2020夏Chatworkインターンに参加させて頂いたレポ","category":"日記","tags":["インターンシップ"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}