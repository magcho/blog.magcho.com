{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"2272e49f-b90b-5fab-be2a-60e964c85bcf","excerpt":"…","html":"<p>キー入力が下手なのでバックスペースを連打しがちなのですがバックスペースキーはキーボード上では遥か右上にあります。これが原因で右手首を痛めたことも。入力精度を上げろという話なのですが出来るならもうしてます。</p>\n<p>また、以外と日本語入力をしていると使いがちな「ー」伸ばし棒も近くに欲しいものです。</p>\n<p>今回は<code class=\"language-text\">C-j</code>にbackspace・<code class=\"language-text\">C-n</code>にハイフンを割り当てます。</p>\n<h2>Ctrlキー</h2>\n<p>Ctrlキー含め装飾キーには様々なキーバインドが割り当てられています。一般的には<code class=\"language-text\">C-j</code>にはreturn・<code class=\"language-text\">C-h</code>にはbackspaceなど色々あります。zsh/bashなどのshellやターミナルのキーバインドに設定されていることが多いです。macでは<code class=\"language-text\">C-k</code>に行末まで削除があったりと気が利いています。</p>\n<p>qmk firmwareではraise/lower等のキーマップを変更・追加してカスタマイズするのが一般的ですがこの場合は複合キーを入力するマクロを全てのキーにおいて定義する必要があり厄介です。</p>\n<p>今回はレイヤーの定義ではなくプログラムっぽく？キー入力を拡張してみます。</p>\n<h2>キータイプ</h2>\n<p>qmk firmwareにてキー入力を拡張するには<code class=\"language-text\">process_record_user()</code>を用いる方法があります。</p>\n<p><a href=\"https://docs.qmk.fm/#/custom_quantum_functions?id=programming-the-behavior-of-any-keycode\">公式ドキュメント</a>に詳しくはありますが、<code class=\"language-text\">process_record_user()</code>はqmk firmwareがキー入力を検知しPCへキー情報を送信する前に毎回呼び出される関数です。通常時返り値を<code class=\"language-text\">true</code>とすることで現在のレイヤーのkeymapを見てPCへキー情報を送信してくれます。今回のように何か特別でキーマップは関与しない処理を行う場合は一通りの処理が終わった後<code class=\"language-text\">false</code>を返しておきます。この場合は<code class=\"language-text\">process_record_user</code>を抜けた時点で処理を終了するようになります。</p>\n<p>今回は<code class=\"language-text\">C-j</code>と<code class=\"language-text\">C-n</code>の時に任意の処理をし、それ以外はキーマップに従うようにしていきます。</p>\n<p>この関数はキーの押下時に加えて”押上”時にも呼び出されます。ctrlとの複合キーであることを判定するにはctrlキー押下時にctrl_pressedという押下フラグを立てておく方法をとります。</p>\n<p>そしてポイントなのがキーの反復機能です。テキストエディタでAキーを押しっぱなしにすると<code class=\"language-text\">AAAAAAAAAAAAAA</code>のようにAが大量に入力されます。それはそう。反復機能が働いている時にキーボードが<code class=\"language-text\">KC_A</code>のkey_downコードを連続して送信しているわけではなく、PC側でkey_downコードが来てからなかなかkey_upコードが来ないので押しっぱなしであると判断しています。</p>\n<p>qmk firmwareにはキーコードを送信するための関数がいくか用意されていますがよく使うのは<code class=\"language-text\">tap_code(KEYCODE)</code>と<code class=\"language-text\">register_code(KEYCODE) / unregister_code(KEYCODE)</code>です。前者はkey_downコードとkey_upコードを連続して送信し、後者はresigerがdown・unregisterがupのコードを送信するものです。用途に合わせて使い分ける必要があります。</p>\n<h2>実装</h2>\n<p>defaultのkeymap.cの下の方に<code class=\"language-text\">process_record_user()</code>の記述があります。ここに実装していきます。</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>keymaps.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>略<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>\n\n<span class=\"token keyword\">static</span> bool ctrl_pressed <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> bool exceptionaly_ctrl_layer_pressed <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">process_record_user</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> keycode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">keyrecord_t</span> <span class=\"token operator\">*</span>record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">SSD1306OLED</span></span>\n        <span class=\"token function\">set_keylog</span><span class=\"token punctuation\">(</span>keycode<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n        <span class=\"token comment\">// set_timelog();</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>keycode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> KC_LCTRL<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ctrl_pressed <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            ctrl_pressed <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">case</span> QWERTY<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">set_single_persistent_default_layer</span><span class=\"token punctuation\">(</span>_QWERTY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>略<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span></code></pre></div>\n<p>上のコードで、引数keycodeに押下/押上されたキーのコードが入っています。<code class=\"language-text\">record->event.pressed</code>にて押下か押上か判断できるのでctrlキーの状態に変化があればフラグを更新します。ここではreturnせずに正常処理をします。</p>\n\n        <div class=\"gatsby-code-title code-title\">\n          <span>keymap.c</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>略<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>\n\n    <span class=\"token keyword\">case</span> ADJUST<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">layer_on</span><span class=\"token punctuation\">(</span>_ADJUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">layer_off</span><span class=\"token punctuation\">(</span>_ADJUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctrl_pressed <span class=\"token operator\">||</span> exceptionaly_ctrl_layer_pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>keycode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> KC_J<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">unregister_code</span><span class=\"token punctuation\">(</span>KC_LCTRL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">register_code</span><span class=\"token punctuation\">(</span>KC_BSPACE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    exceptionaly_ctrl_layer_pressed <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">unregister_code</span><span class=\"token punctuation\">(</span>KC_BSPACE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ctrl_pressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token function\">register_code</span><span class=\"token punctuation\">(</span>KC_LCTRL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n                    exceptionaly_ctrl_layer_pressed <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> KC_N<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">-></span>event<span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">unregister_code</span><span class=\"token punctuation\">(</span>KC_LCTRL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">register_code</span><span class=\"token punctuation\">(</span>KC_MINUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    exceptionaly_ctrl_layer_pressed <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">unregister_code</span><span class=\"token punctuation\">(</span>KC_MINUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ctrl_pressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token function\">register_code</span><span class=\"token punctuation\">(</span>KC_LTRL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n                    exceptionaly_ctrl_layer_pressed <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上のコードで、switchにてctrlキーとレイヤ切り替えキーを判定し、それ以外はdefaultに入ります。ここで<code class=\"language-text\">ctrl\\_pressed</code>フラグを用いて押下中(修飾キー)であるかを判定し、任意のキーとの組み合わせ(ここでは<code class=\"language-text\">C-J</code>/<code class=\"language-text\">C-N</code>)であれば<code class=\"language-text\">register\\_code(KEYCODE)</code>にてキーを打ちます。</p>\n<p>今回のようにbackspaceやハイフンといった本来修飾キーを用いないキー(Ctrlとの複合キーではないキー)の場合はPCにこれは修飾キーでないことを伝えるために<code class=\"language-text\">unregister_code(KC_LCTRL)</code>にてctrlキーをを仮想的に押上しておきます。</p>\n<p>ここでは長押ししたら複数文字backspace/ハイフンを入力して欲しいので<code class=\"language-text\">register</code>を利用しています。</p>\n<p>そして押上時に<code class=\"language-text\">unregister</code>して<code class=\"language-text\">register_code(KC_LCTRL)</code>にて仮想的なctrlキーの押下を戻しておくといいです。backspaceで数文字消した後貼り付けしたい時にctrlキーを押しなおす必要がなくなり、より自然になるかと。</p>\n<p>入力時に<code class=\"language-text\">Ctrl(down) -> J(down) -> J(up) -> Ctrl(up)</code>とタイプしているつもりでも指が離れるタイミングによってはupのタイミングが逆になることもあり得るのでフラグで状態管理をして<code class=\"language-text\">if(ctrl_pressed || exceptionaly_ctrl_layer_pressed)</code>のようにどちらのフラグでも対応できると安心。</p>\n<h2>おわり</h2>\n<p>キーマップのカスタマイズは既成のキーボードでも十分できますが、自作キーボードでは大抵のことを作ればできるので楽しい。</p>\n<h2>リンク</h2>\n<ul>\n<li><a href=\"https://support.apple.com/ja-jp/HT201236\">Mac のキーボードショートカット - Apple サポート</a></li>\n<li><a href=\"https://github.com/qmk/qmk_firmware/blob/master/keyboards/lily58/keymaps/default/keymap.c\">qmk_firmware/keymap.c at master · qmk/qmk_firmware</a></li>\n<li><a href=\"https://github.com/magcho/qmk_firmware/blob/master/keyboards/lily58/keymaps/magcho/keymap.c\">qmk firmware/keymap.c at master · magcho/qmk firmware</a></li>\n<li><a href=\"https://docs.qmk.fm/#/custom_quantum_functions?id=programming-the-behavior-of-any-keycode\">Customizing Functionality - QMK Firmware</a></li>\n<li><a href=\"https://docs.qmk.fm/#/keycodes\">Full List - QMK Firmware</a></li>\n</ul>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする.md","frontmatter":{"title":"qmk firmwareでctrlとの同時押しをカスタマイズする","tags":["qmk firmware","自作キーボード"],"category":"プログラミング","fullDate":"2020-04-08"},"fields":{"lastFileUpdatedAt":"2022-09-17","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/","previous":{"excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"},"frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]}},"next":{"excerpt":"gulp-sharp で画像のリサイズをしたい時にできなかったので自分でそれっぽいのを書いた。 フロントエンドで画像を扱う時にsrcディレクトリには元の大きさの画像を用意してdistディレクトリには適切なサイズまで小さくして公開する運用をしている。 自分は欲しい大きさにresizeしてからoptimiseをしています、gulpでのresizeで一番npmでダウンロード数が多いのはgulp-image-resizeです。このライブラリはGraphicsMagick か ImageMagickまたはその両方を必要とします。CIでサイトをビルドする時にこれらがインストールされていないときは自分でapt等でインストールをする必要がありますが、ciの制約でインストールができなかったのでsharpを使ってresizeさせたかった。 探すとgulp-sharp…","fields":{"slug":"/2020/5/gulp-sharp/"},"frontmatter":{"date":"05/04","title":"GulpでSharpを使って画像のリサイズをする","category":"プログラミング","tags":["Gulp"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}