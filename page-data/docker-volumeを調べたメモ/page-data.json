{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/docker-volumeを調べたメモ/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"02f88379-c68f-5a66-9a01-ec2b5b0864ec","excerpt":"完全にメモ書きになってるので Evernote にでも書けよって感じ。 Docker…","html":"<p>完全にメモ書きになってるので Evernote にでも書けよって感じ。</p>\n<p>Docker はコンテナ型仮想化システムで、必要な時に必要なだけコンテナを作り、終わったら捨てる。いわば使い捨てだ。でも、消えて欲しくないデータを扱う事もあるだろう。そんな話。</p>\n<p>自分はインフラエンジニアではないし、Docker でホストの環境弄らずに開発環境作りたかったから始めたっていう理由</p>\n<p>Docker コンテナは使い捨てるもの → 残したいファイルはコンテの外に保存しておこうっていう考えらしい。</p>\n<h2>Docker の volume にも色々ある</h2>\n<ul>\n<li>docker run の-v オプション\n<code class=\"language-text\">$ Docker run -v /hoge centos:latest</code>\ncentos の latest(最新版)を起動するコマンドである。この時-v オプションを使ってコンテナ内に/hoge という名前のシンボリックリングを作成し、フォルダの実体は/var/lib/docker/volumes/{ランダムな英数字}/_data/にある。このフォルダは docker がコンテナと連動させて管理しているため、docker コンテナを消せばこのフォルダも消えます。\n** 説明のため、コマンドは一部省略しています **</li>\n</ul>\n<p>この時、内部では 1. ホストに実体のフォルダを作る 2. イメージからコンテナをつくり動かす 3. ホストのフォルダへのリンクをコンテナに作る(上書く)</p>\n<p>ってイメージらしい。</p>\n<ul>\n<li>ホストのフォルダとコンテナのフォルダを同期する\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> $ docker run -v {ホストのフォルダ(実体)}:{コンテナ内のリンク名} centos:latest</code></pre></div>\nこのコマンドでホストのフォルダへのシンボリックリンクをコンテナ作成時に貼る。こうすれば、コンテナの設定を変えてリビルドしてもファイルは消えずに残る。\nまた、ホストにファイルがあるのでホストでエディターを開き、コンテナで開発環境を揃え実行できるので環境のバージョンを変えるのもイメージを差し替えるだけだし、ソースをホスト側で git 管理する事もできる。</li>\n</ul>\n<h2>後記</h2>\n<p>dockerfile や docker-compose にも同様の機能があるので、もう少し検証したい</p>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/docker-volumeを調べたメモ.md","frontmatter":{"title":"Docker volumeを調べたメモ","tags":["Docker"],"category":"プログラミング","fullDate":"2017-01-06"},"fields":{"lastFileUpdatedAt":"2022-09-21","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/docker-volumeを調べたメモ/","previous":{"excerpt":"DMX512-A 仕様 シールド付きツイストペアケーブルを使用すること RS-485 では 1500m までの通信が保証されているが、RS-485 の仕様の中でケーブルの長さを伸ばすと通信速度が下がるとされているので、DMX512-A の通信速度 250kbps が保証されるのはケーブル長 400m までとされている。 RS-485 の仕様では 1Master で 32Slave までとされている DMX512-A のボーレートは 250kpbs なので、1bit あたり 4μsec (※1)a 端末にはターミネータ(終端抵抗)をつける DMX512-A では基本的に 120Ω となっている(100-120)と幅を効かせて定義もされている。 仕様上では１パケット長が最小で 22.7msec になり、リフレッシュレートは最大で 44Hz になる ※1: 仕様では基本 250kbps…","fields":{"slug":"/dmx512のプロトコルをまとめる/"},"frontmatter":{"date":"01/03","title":"DMX512のプロトコルをまとめる","category":"舞台技術","tags":["DMX512"]}},"next":{"excerpt":"イベント概要 非営利 自分も含め、企画側は全員学生、お客さんは学生と教員 イベントを行った場所は学校 使用キャラクターはクリプトンヒューチャー社の VOCALOID キャラクターのみ 準備 スクリーンについて スクリーンを選ぶポイント 安い 短辺が２メートル以上あるロール状のシート 無地 (フィルム表面に何も印字されていない) 学生でも買える 軽い 学校に搬入可能である を考え、今回利用したのがカインズホームの農ポリ 0.05X210X100 5000 円以下で購入でき、サイズも短辺が 2m10cm あり支払いもコンビニで OK、完全に無地で、ロールの状態で 9kg…","fields":{"slug":"/ポリッドスクリーンを使ったボカロ系イベントを作った話/"},"frontmatter":{"date":"08/04","title":"ポリッドスクリーンを使ったボカロ系イベントを作った話","category":"舞台技術","tags":["ポリッドスクリーン"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}