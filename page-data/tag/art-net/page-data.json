{"componentChunkName":"component---src-templates-tags-list-jsx","path":"/tag/art-net","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","description":"magchoの日記とか思いつきを記録するブログ"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","fields":{"slug":"/2018/10/olaについて/"},"frontmatter":{"title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"],"date":"10/13"}}}]}},"pageContext":{"tagName":"Art-Net","siteMetadata":{"title":"magcho's blog","description":"magchoの日記とか思いつきを記録するブログ","categories":["舞台技術","電子工作","プログラミング","日記"],"postParPage":10},"siteTagsList":[{"fieldValue":"3D_printer","edges":[{"node":{"id":"ea8dd6f7-01fe-52eb-b2ce-d46810a287fc","excerpt":"先日VoxelabのAquilaという3Dプリンターを購入しました。以前から欲しいな〜と思っていた3D printerを一人暮らしを始めたしいい機会だと思って購入してみました。3Dプリンター自体は初めてではなく、今まではfab施設の方に3D CADのデータを送って出力作業はお任せしていたので実際に自分で印刷するのは初でした。 Aquilaシリーズの一番廉価モデルで２万円のものなのであまり期待していなかったのですが、届いて組み立ててみるとかなりちゃんとしています。無骨なアルミフレームのフォルムにガラスプレートがついています。かっこいい 試しにDEMOでついているデータを出力してみました。パラメーターの調整なしでもかなり綺麗に出力できています、２万円のプリンターすごい  CAD ネット上にあるデータを印刷して遊んでいたのですが、そろそろ自分で作りたくなってきました。ちょうど3D printer…","frontmatter":{"date":"05/06","title":"3Dプリンターを買った","category":"日記","tags":["3D_printer"]},"fields":{"slug":"/2022/5/3d_printer/"}}}]},{"fieldValue":"AWS","edges":[{"node":{"id":"d58af168-fedd-541c-92ee-0631e7381365","excerpt":"事の発端 学校で課題研究の授業があって数人でグループを組んで自然言語処理の研究をしていたところ、VPS が必要になってどうしようと思ってたら Github education の中に AWS あったなーと思ってセットアップしてたらクレジットカード番号必須で詰んだ。\nそんなこんなして、解決できたのでここにメモしておく。 高校生とクレカ 基本的に高校生はクレジットカードが作れない。クレジットカード会社の規定なのだからしょうがない。なら代わりになるものを使えばいいじゃないという考え。 デビッドカードを作る 日本の銀行などでは１５歳以上（中学生を除く）でデビッドカードが作れる場合がある、このカードがあればクレジットカード同様に AWS…","frontmatter":{"date":"08/20","title":"AWSの学割は高校生に優しくない","category":"プログラミング","tags":["AWS"]},"fields":{"slug":"/awsの学割は高校生に優しくない/"}}}]},{"fieldValue":"Apple Watch","edges":[{"node":{"id":"1281ace1-e67b-59b4-8b91-035e0c384b63","excerpt":"先日 Apple watch のシリーズ 3 の 42mm モデルを買いました。ほんとは paypay のキャッシュバックキャンペーンで買いたかったんですが、忙しくて買い損ねてしまった。 スマートウォッチを買うのは初めてではなくて、5 月ぐらいから amazon で売ってる 3,000 円ぐらいの中国のヘルスケアバンドみたいなやつを買ってつけてました。iPhone の通知を振動とディスプレイで表示してくれるのでとても便利です。自分はお仕事柄暗くて大音量の音が鳴っている空間にいることがあるのでポケットにいれたスマホの通知に気が付きません。さらにスマートウォッチならバックライトがついてたり、有機 EL でディスプレイが光るので暗くても表示が見えて良きです。 そして、apple watch に買い換えてからなんですが、以前のスマートウォッチに比べて画面が大きいですし、厚みが 5mm…","frontmatter":{"date":"01/20","title":"Apple watchを買った","category":"日記","tags":["Apple Watch"]},"fields":{"slug":"/2019/01/apple-watch/"}}}]},{"fieldValue":"Arduino","edges":[{"node":{"id":"7754caab-e7f2-53d0-8f9e-90c24a728355","excerpt":"買ったやつ http://amzn.asia/b5Kk31r インストールしたドライバー http://www.wch.cn/download/CH341SER_MAC_ZIP.html","frontmatter":{"date":"08/16","title":"Arduino互換品のドライバーメモ","category":"電子工作","tags":["Arduino"]},"fields":{"slug":"/arduino互換品のドライバーメモ/"}}}]},{"fieldValue":"Art-Net","edges":[{"node":{"id":"a0aaf51c-b751-5021-9dd8-4565052521f1","excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","frontmatter":{"date":"10/13","title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"]},"fields":{"slug":"/2018/10/olaについて/"}}}]},{"fieldValue":"Chrome","edges":[{"node":{"id":"8ca527a9-6151-5445-bfb2-0c630aa3235e","excerpt":"google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。 さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。 ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。 この恐竜はネットワークに問題がある時に加えて、chromeでにアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。 ちなみにネットワークエラーの時には小さいdinoくんですがで表示したdino…","frontmatter":{"date":"11/22","title":"Chromeのティラノサウルスについて調べた","category":"プログラミング","tags":["Chrome","OSS"]},"fields":{"slug":"/2019/11/dino/"}}}]},{"fieldValue":"DMX512","edges":[{"node":{"id":"a0aaf51c-b751-5021-9dd8-4565052521f1","excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","frontmatter":{"date":"10/13","title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"]},"fields":{"slug":"/2018/10/olaについて/"}}},{"node":{"id":"a81d0b02-4501-5950-a517-d7023e1531b6","excerpt":"DMXSerial 使っただけ。この方法だと HardwareSerial を使うので、スケッチ書き込み時に TX,RX からピンを抜いておかないと書き込みエラーが出たりするので、組み込みで半田付けしてからスケッチ修正できない。ムムム  https://qiita.com/loveandsheep/items/e1295ec9ce589","frontmatter":{"date":"01/05","title":"ArduinoでDMXを受ける","category":"舞台技術","tags":["DMX512"]},"fields":{"slug":"/arduinoでdmxを受ける/"}}},{"node":{"id":"a255e1a8-fb24-5cb7-88f0-f5a53f50df63","excerpt":"部品 Arduino UNO 互換品 RS485 モジュール XLR コネクター 配線  スケッチ DmxSimpleをとりあえず書き込んでサンプルを動かしてみた。\nこのライブラリデフォルトの Pin アサインは上の図の通りだが、コード内で別途指定すれば変更できるっぽい。 SerialToDmxは PC からのシリアル画面からって感じで送ってやれば送信できる、5ch に 255 を出力するとと送信すればいいらしい。 FadeUpは Pin アサインがデフォルトから変更されているので、 しとけばとりあえず動いた。 LTC485 の仕様としてこの図では DE を Arduino のデジタル GPIO のアウトを使って 5V を印加している。この DE を HIGH にすると送信 LOW にすると受信モードになる","frontmatter":{"date":"01/01","title":"格安ArduinoでDMXを送信する","category":"電子工作","tags":["DMX512"]},"fields":{"slug":"/格安arduinoでdmxを送信する/"}}},{"node":{"id":"8ad8917d-b1f2-51dd-aedd-ba33d5ea4188","excerpt":"DMX512-A 仕様 シールド付きツイストペアケーブルを使用すること RS-485 では 1500m までの通信が保証されているが、RS-485 の仕様の中でケーブルの長さを伸ばすと通信速度が下がるとされているので、DMX512-A の通信速度 250kbps が保証されるのはケーブル長 400m までとされている。 RS-485 の仕様では 1Master で 32Slave までとされている DMX512-A のボーレートは 250kpbs なので、1bit あたり 4μsec (※1)a 端末にはターミネータ(終端抵抗)をつける DMX512-A では基本的に 120Ω となっている(100-120)と幅を効かせて定義もされている。 仕様上では１パケット長が最小で 22.7msec になり、リフレッシュレートは最大で 44Hz になる ※1: 仕様では基本 250kbps…","frontmatter":{"date":"01/03","title":"DMX512のプロトコルをまとめる","category":"舞台技術","tags":["DMX512"]},"fields":{"slug":"/dmx512のプロトコルをまとめる/"}}},{"node":{"id":"608c88b6-1a7f-5460-9721-c561b0606ee8","excerpt":"DMX 機器を何種類か導入したはいいものの、卓がなかったり、単純にオペレータが不足してたりするので、PC で一括制御したくなったので作った。 ネットを検索していると Arudino やラズパイを使い PC から DMX 信号を出力しているものをいくつか見つけたが、たかが DMX にはオーバースペックだなぁとか、思ってたら、安上がりの記事を見つけたので実際に作ってみる。 https://stevenbreuls.com/2013/05/diy-usb-dmx-dongle-interface-for-under-10/ この記事にしたがって作っていけば困ることはなかった。何個か作っているうちに一番手頃に手に入ると思った材料を紹介します。 https://www.amazon.co.jp/dp/B01D140BAU USBA-B オスオス (ダイソーで購入) 50…","frontmatter":{"date":"08/20","title":"安価でDMX機器をPCでコントロールしたかった","category":"舞台技術","tags":["DMX512"]},"fields":{"slug":"/安価でdmx機器をpcでコントロールしたかった/"}}}]},{"fieldValue":"Docker","edges":[{"node":{"id":"b4fa6ab2-fc16-555c-8df4-d0dc0b360e53","excerpt":"内容 DockerHub の公式の PHP イメージを使っていて、mod_rewite したい人向けのお話です。結論だけ知りたい人は読み飛ばしてね。 事の発端 僕自身が立ち上げた web サービスではもともと URL がという感じでとてもダサかったので、かっこよくしたかった。WordPress などではパーマリンクと呼ばれ URL がイカした感じになっているので、僕も方法をパクった。\n調べると apache 側の設定で mod_rewrite を使うとアクセス時に URL を記述したルールに基づいて置換してくれるらしい。 僕の web サービスではアクセスを全て index.php で受け、get パラメータで動作を変化させている、pukiwiki とか？の設計をパクったはず。動作ルールは以下  cmd view 記事の表示、page で記事を指定 edit 記事の編集、page…","frontmatter":{"date":"08/11","title":"Dockerで立ち上げたwebサーバでmod_rewriteしたかった話","category":"プログラミング","tags":["Docker"]},"fields":{"slug":"/dockerで立ち上げたwebサーバでmod_rewriteしたかった話/"}}},{"node":{"id":"02f88379-c68f-5a66-9a01-ec2b5b0864ec","excerpt":"完全にメモ書きになってるので Evernote にでも書けよって感じ。 Docker はコンテナ型仮想化システムで、必要な時に必要なだけコンテナを作り、終わったら捨てる。いわば使い捨てだ。でも、消えて欲しくないデータを扱う事もあるだろう。そんな話。 自分はインフラエンジニアではないし、Docker でホストの環境弄らずに開発環境作りたかったから始めたっていう理由 Docker コンテナは使い捨てるもの → 残したいファイルはコンテの外に保存しておこうっていう考えらしい。 Docker の volume にも色々ある docker run の-v オプション\n\ncentos の latest(最新版)を起動するコマンドである。この時-v オプションを使ってコンテナ内に/hoge という名前のシンボリックリングを作成し、フォルダの実体は/var/lib/docker/volumes…","frontmatter":{"date":"01/06","title":"Docker volumeを調べたメモ","category":"プログラミング","tags":["Docker"]},"fields":{"slug":"/docker-volumeを調べたメモ/"}}}]},{"fieldValue":"GitHub Actions","edges":[{"node":{"id":"0fdd1587-d82d-56cb-9aa7-5e55ac85ef59","excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]},"fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"}}}]},{"fieldValue":"Gulp","edges":[{"node":{"id":"0ce1f90b-e710-591a-b320-250f339a0d5f","excerpt":"gulp-sharp で画像のリサイズをしたい時にできなかったので自分でそれっぽいのを書いた。 フロントエンドで画像を扱う時にsrcディレクトリには元の大きさの画像を用意してdistディレクトリには適切なサイズまで小さくして公開する運用をしている。 自分は欲しい大きさにresizeしてからoptimiseをしています、gulpでのresizeで一番npmでダウンロード数が多いのはgulp-image-resizeです。このライブラリはGraphicsMagick か ImageMagickまたはその両方を必要とします。CIでサイトをビルドする時にこれらがインストールされていないときは自分でapt等でインストールをする必要がありますが、ciの制約でインストールができなかったのでsharpを使ってresizeさせたかった。 探すとgulp-sharp…","frontmatter":{"date":"05/04","title":"GulpでSharpを使って画像のリサイズをする","category":"プログラミング","tags":["Gulp"]},"fields":{"slug":"/2020/5/gulp-sharp/"}}}]},{"fieldValue":"Homebrew","edges":[{"node":{"id":"040f60a7-deb3-56f0-92c8-a2d4556b4c5d","excerpt":"状況説明 かなり前から homebrew cask を使うと。 こんなのが出てきていた。「cask のバージョンアップでアプリが配置されるディレクトリの場所が変わったから前の場所に置いてたアプリ新しいとこに移動してくれ」っていう話だった気がする、筆者は面倒だから移動しなくても使えるからやっていなかったが、docker がうまくインストールできないので今更対応した。\nやることは簡単、コンソールに書いてあるURLに書いている通りに進めるだけだが、しかし今回 Thunderbird…","frontmatter":{"date":"12/03","title":"Homebrew Caskで特定のアプリがインストールできなくなった話","category":"プログラミング","tags":["Homebrew"]},"fields":{"slug":"/homebrew-caskで特定のアプリがインストールできなくなった話/"}}}]},{"fieldValue":"M5Paper","edges":[{"node":{"id":"de0aa3c7-1115-5650-8b8f-1200cf503d41","excerpt":"M5Paperの出荷時に書き込まれているファームウェアーをベースに機能を追加してみようと思い初期ファームウェアをvscode(platform.io)で開いたもののビルドできない&書き込めなくて困ったので解決方法をメモ 環境 MacOS Monterey ビルドエラー 初期ファームウェアのコード m5stack/M5Paper_FactoryTest  をクローンし、vscodeで開いた後、ビルドをするとエラーで完了しない。 おそらくこのコードが書かれた以後、i2c…","frontmatter":{"date":"05/08","title":"M5Paper V1.1にPlatform.ioから書き込みをする","category":"電子工作","tags":["M5Paper"]},"fields":{"slug":"/2022/5/m5_paper/"}}}]},{"fieldValue":"Netlify","edges":[{"node":{"id":"72370684-cc34-585d-aec5-ea7596cfc983","excerpt":"情報が古く、執筆時の Netlifty の UI 等が変わっています。ご注意を 事の発端 IOS 11 ｷﾀ ━(ﾟ ∀ ﾟ)━! 　 Safari からカメラの映像が取得できる！　これでアプリではなくブラウザから AR できるようになった！と喜んでいたら、このカメラの api は https じゃないとセキュリティ的な問題で動かないのである。 Github pages で独自ドメインでホスティングしているサイトを HTTPS にしたいけどお金はない。 すでに導入レポは検索すればいくつも見つかるものの、どうも日本語の情報が少ないのでメモすることにした。 使ったもの Github Netlify お名前.com 手順 お名前.com でドメインを取得します。 Github に公開するサイトのファイル一式を push しておきます。 一度 Github pages…","frontmatter":{"date":"10/15","title":"NetlifyとGithubで独自ドメインのサイトをHTTPS化したメモ","category":"プログラミング","tags":["Netlify"]},"fields":{"slug":"/netlifyとgithubで独自ドメインのサイトをhttps化したメモ/"}}}]},{"fieldValue":"Nginx","edges":[{"node":{"id":"6c83f8d0-cdbe-52f4-9a1e-3dcece9c16a3","excerpt":"開発検証のために本番環境ドメイン(example.com)のサブドメインに PR 名を付与した(PR-1.example.com)を staging 環境として公開した手順メモ 今回は 1 台の VPS 内に Jenkins を用い PR 数分の docker-compose コンテナ群を作り、空いている任意のポートに公開したのち Nginx を用いて{PR 名}.example.com へのアクセスを 127.0.0.1:{公開中のポート}にリバースプロキシしていきます。 概要 vps 内で稼働している DB に以下のようにサブドメインと port 番号のペアを登録しておき、これらを Nginx から読み込んでへのアクセスをへ転送する。 構成 ubuntu18.04.5 Nginx(Openresty) lua-nginx-module mysql-nginx-module MySQL…","frontmatter":{"date":"01/24","title":"MySQL, Nginx(Openresty)で動的リバースプロキシ","category":"プログラミング","tags":["Nginx"]},"fields":{"slug":"/2021/1/reverse_proxy/"}}}]},{"fieldValue":"OLA","edges":[{"node":{"id":"a0aaf51c-b751-5021-9dd8-4565052521f1","excerpt":"OLA とは Open Lighting Project という組織が開発をしています。この組織は、2004 年当時、オープンな照明用のプロトコル Art-Net に目をつけた大学生がそれを活用できるように OSS などを整備していくことを目的に作られたものみたいです。(※History)\nOLA の他にも Linux 系で Art-Net 扱うためのライブラリである libartnet や rdm テスターなども製作しています。 その製作プロジェクトの一つである OLA。これは DMX over Ethernet の各種プロトコルや USB の DMX ノード各種などの信号を変換するノードです。対応しているプロトコル、デバイスはOLA の HPからも確認できます。 面白いのが、メーカーが仕様を一般に公開していないノードであっても OLA…","frontmatter":{"date":"10/13","title":"Open Lighting Architectureについて","category":"舞台技術","tags":["OLA","DMX512","Art-Net"]},"fields":{"slug":"/2018/10/olaについて/"}}}]},{"fieldValue":"OSS","edges":[{"node":{"id":"8ca527a9-6151-5445-bfb2-0c630aa3235e","excerpt":"google chromeにはネットワークに問題があると恐竜のイラストが表示され、スペースや上下キーで操作できる障害物避けゲームができることは有名な話ですね。自分はこの無愛想なデザインの恐竜がかわいくて好きです。 さて、好きなものを身に付けたいという感情は自然の摂理ですが。この恐竜に関するグッズはgoogleのオンラインショップではTシャツしか販売していません、実店舗に置物はあるらしい。ストラップとかステッカーとかトートバックとかが欲しいんです。 ないなら作るしかないので、そもそも作って問題ないのかを考え、ライセンス周りを調べてみたかった所存です。 この恐竜はネットワークに問題がある時に加えて、chromeでにアクセスすることで表示することができます。これを見る感じdinoと呼ばれているみたいですね。 ちなみにネットワークエラーの時には小さいdinoくんですがで表示したdino…","frontmatter":{"date":"11/22","title":"Chromeのティラノサウルスについて調べた","category":"プログラミング","tags":["Chrome","OSS"]},"fields":{"slug":"/2019/11/dino/"}}}]},{"fieldValue":"SOAP","edges":[{"node":{"id":"dc6e284c-0376-566c-8270-72861e1dc6c1","excerpt":"今日においてWEB APIといえばREST or GraphQLといったところですが、他にもいろいろな方式が考案され普及し衰退していったようです。そんな中でも衰退した方のSOAPのAPIを使うことになったけど日本語情報が少なくて困ったので覚書です。 SOAPはRPCの一種でネットワーク越しに何らかの関数を呼ぶような感覚で使えました。SOAPはRESTとは違い１つのエンドポイントに対して所定のXMLにて引数を組み立てPOSTなどで送ることで利用できます。 この所定のXMLですがプロトコル上人間が組み立てるのではなくライブラリが自動でXMLを生成してやり取りすることを想定しているようです。なのでライブラリにこの定義を読み込ませるためのスキーマーとしてWSDLというものがあります、中身はXML形式でリクエストやレスポンスの形式が定義されておりAPI…","frontmatter":{"date":"03/20","title":"SOAP APIを使ったメモ","category":"プログラミング","tags":["SOAP"]},"fields":{"slug":"/2021/3/soap/"}}}]},{"fieldValue":"TypeScript","edges":[{"node":{"id":"e82b1370-4637-51ba-85a7-145dbc3bb231","excerpt":"JWTを用いたAPIリクエストをするSPAをReactで作っていた中で、全てのAxiosのリクエストのヘッダーにJWTを付与してさらにレスポンスに型をつけたかった。 SPAからバックエンドサーバーに通信する際のリクエストヘッダーにを付与したく、さらにはJWTの有効期限が切れている場合は勝手にJWTを更新した上でリクエストをする仕組みが欲しかった。 axiosのレスポンスに型をつける Axiosの型定義を見るとといった形でレスポンスの型情報に型パラメータが使える。 しかし、Axiosは非同期的に使うと思うのでの返り値はですが、以下のような型定義なので同じとみなせます。 ということは、以下のようなコードがかけます。 のレスポンスが以下の型である時 リクエストするAxiosのコードは Bearerヘッダーを付与・JWTの有効期限も考慮する axiosのインスタンスを作り、そこにBearer…","frontmatter":{"date":"06/11","title":"AxiosにJWTつけてレスポンスに型もつけたい","category":"プログラミング","tags":["TypeScript"]},"fields":{"slug":"/2021/6/axios/"}}}]},{"fieldValue":"dotz","edges":[{"node":{"id":"0fdd1587-d82d-56cb-9aa7-5e55ac85ef59","excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]},"fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"}}},{"node":{"id":"37cdaf92-64ba-5601-b0ae-034c019d2931","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]},"fields":{"slug":"/2019/09/dotz/"}}}]},{"fieldValue":"emacs","edges":[{"node":{"id":"a4ff480c-b300-57ba-b4a8-306e052eb15f","excerpt":"先日Intel mac向けにemacs-ngをビルドする記事を書きました。しばらく使ってみましたが深刻な問題が起こることもなく常用できそうだったのでM1 mac向けにもビルドして普段使いしたいと思った次第です。 ビルド手順 ビルドに必要な依存関係をドキュメントに従ってインストールします。https://emacs-ng.github.io/emacs-ng/build/building/ 以下のコマンドでビルドします。 今回はとを有効化します。jsonの方はをbrewでインストールし、configure時にオプションを渡してあげればOKです。 native compilationの方は、現状コンパイラがlibgccjit…","frontmatter":{"date":"12/11","title":"M1 macでemacs-ngをビルドする","category":"プログラミング","tags":["emacs"]},"fields":{"slug":"/2021/12/m1-emacsng/"}}},{"node":{"id":"2a49bc09-1c91-58df-9e8c-1455ef6966fa","excerpt":"EmacsにTabを追加するパッケージであるtabbar.elを使っています。このパッケージはBuffer名をエディタ上部に並べてくれる機能を提供します。 tabbar.elには標準でmajor modeごとにタブグループを作る機能があります、このグルーピングをproject名(.gitディレクトリが入っているディレクトリ名)ごとにまとめてVSCodeのマルチウィンドウのように扱いたかったので以下のようにして解決しました。 projectile.elに依存しているので別途設定が必要です。","frontmatter":{"date":"10/19","title":"Emacsのtabbar-modeをProjectごとに切り替える","category":"プログラミング","tags":["emacs"]},"fields":{"slug":"/2021/10/tabbar-group/"}}},{"node":{"id":"fbc542e6-221d-54af-80b6-4dd373c2202f","excerpt":"https://github.com/emacs-ng/emacs-ng 先日emacs-ngという通常のEmacsをforkしRustのWebrenderとDenoのランタイムを加えたプロジェクトを見つけました。READMEに記載されているように、完全な別プロジェクトというわけではなく定期的に本家のEmacsのmasterブランチの変更を取り込み、あくまでも現行のEmacsに新しいアイディアを付与するというプロジェクトらしいです。 現在のemacs-ngは本家の2021年8月24日時点のmasterを取り込んでいるためネイティブコンパイルも利用できます。 Ubuntu向けのバイナリであればGitHub Releaseで配布されていますが、MacOS向けのバイナリは配布されていないので自前でビルドする必要があります。ビルド方法はドキュメントページに記載されていますがPATH…","frontmatter":{"date":"10/11","title":"emacs-ngをnative comp有効化してmacos向けにビルドした","category":"プログラミング","tags":["emacs"]},"fields":{"slug":"/2021/10/emacs-ng/"}}},{"node":{"id":"d6b211e0-c14b-5f3e-a935-02c0ca104893","excerpt":"Emacsのパッケージマネージャーのuse-package.elにはパッケージインストールの他に任意のタイミングで評価させるキーワードというものがありますが、自分はこれをよく分からず使っているので調べてまとめます。 実行タイミング 評価の順番はこうなります パッケージ名の実在確認    パッケージをロード パッケージをロード  インストールするパッケージの設定を記述するためのキーワードです。 :preface 条件分岐キーワードを同時に使用していた時でも、条件分岐よりも先に評価されます。つまり、指定したパッケージ名が実在するならば真っ先に必ず評価してくれます。 :init パッケージが読み込まれる前に評価されます。遅延キーワードの影響を受けません。 :config 当該のパッケージが読み込まれた後に評価されます。initに比べ、config…","frontmatter":{"date":"12/02","title":"use-packageについてまとめる","category":"プログラミング","tags":["emacs","use-package"]},"fields":{"slug":"/2019/12/use-package/"}}},{"node":{"id":"262d84b4-aa04-572b-ae90-84cf1975e8ca","excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。  なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","frontmatter":{"date":"08/21","title":"tmux上のemacsで下線が表示されなかった話","category":"プログラミング","tags":["emacs","tmux"]},"fields":{"slug":"/2019/08/tmux-emacs-underline/"}}}]},{"fieldValue":"gatsby.js","edges":[{"node":{"id":"a4f46984-92ca-52f8-9c9b-054d61448452","excerpt":"2021年3月にGatsby.jsのv3がリリースされました、多少の破壊的な変更はあるもののv1からv2の時ほどの苦労はなくアップデートできた気がします。 いくつか進化がありますが、一番にビルド速度が一段と早くなった気がします。HotReloadが特に早くなりエディタからブラウザに画面を切り替えるとすでにリロードされており待ち時間が無くなっているように感じます、すごい。さらにはブラウザ上にエラーメッセージがモーダルでしっかり表示されるようになりました。これで開発も一段と楽になった気がします。また、いよいよincremental buildが正式に使えるようになりました。deployにかかる時間が大幅に短縮されるのではないでしょうか。 v2からv3への更新にあたっていくつかの破壊的な更新があるため多少修正しないとビルドが通りませんでした。内容は公式のマイグレーションガイドに従えばOK…","frontmatter":{"date":"03/14","title":"Gatsby.jsをv3に更新した","category":"プログラミング","tags":["gatsby.js"]},"fields":{"slug":"/2021/3/gatsby-v3/"}}},{"node":{"id":"b32afd63-6ba9-5c8b-8021-26daf5ef748a","excerpt":"前は hatenablog を使っていたものの、自分でブログを構築したくなったので作ってみた。WordPress 等の CMS でやるにはメンテナンスが面倒なこともあって静的サイトジェネレータを使いました。一度 jekyll で作りましたが gatsbyjs を教えてもらってその表示速度に驚かされたのでこれはやるしかないと思い作りました。 gatsby.js は React ベースの静的サイトジェネレータです、つい最近 v2.0.0 になったばかりで公式のドキュメントにかきかけのところがあったりもしますが英語圏に情報が落ちているので大概のことはググればすぐに解決します。ただ日本語の情報が他のジェネレータ系に比べて少ないのでとっつきにくいと言われればそうなのですが最適化とか考えなくてもとりあえず作れば Gatsby…","frontmatter":{"date":"09/26","title":"ブログをgatsbyに移行した話","category":"日記","tags":["gatsby.js","ブログ"]},"fields":{"slug":"/2018/09/gatsbyに移行した話/"}}}]},{"fieldValue":"git","edges":[{"node":{"id":"5e644623-9cf8-59a4-a014-9a560b69f27a","excerpt":"demo asciicast gitignoreを言語とに自動生成してくれるサービスはいくつかありますが、わざわざwebサイトを開くのも面倒です。\n幸いなことにgitignore.ioがapiを提供してくれています、これを利用してgitにサブコマンドを追加しましょう。 ついでに.gitignoreを上書き・追記の確認・gitignore.ioにテンプレートが存在しない場合はエラーを表示などもあると親切ですね。shにするとこんな感じに。 .gitconfigに書くとときには全体を関数にする・ダブルクォーテーションをエスケープ・が使えないのでに差し替えなどをすると以下になります。 書いていて気づいたんですが、#はエスケープせずに動きますね。 使い方","frontmatter":{"date":"06/14","title":".gitignoreを自動生成するサブコマンドを作ろう","category":"プログラミング","tags":["git"]},"fields":{"slug":"/2020/6/gitignore/"}}}]},{"fieldValue":"github","edges":[{"node":{"id":"d127d264-aac6-521d-85fc-442bab941061","excerpt":"初めに GitHub Actionsには2000分/月の無料枠がありますがビジュアルテストなど時間がかかりそうなテストをたくさん回そうとすると足りなくなることがあります。GitHubが提供しているSelf hosted runnerのエージェントを自前で用意したマシンに入れることで代わりの実行環境として利用できます。 VM Oracle cloudのARMマシンが余っていたのでこのマシンたちを利用して構築しました。セルフホストランナーをサポートするアーキテクチャとオペレーティングシステムに記載されているようにLinuxであればARMでも利用できます。 インストール Jenkinsのようにマシンにエージェントをインストールしてから設定するのかと思いきや、まず最初に設定するリポジトリ/Organizationの設定画面からnew self-hosted runner…","frontmatter":{"date":"10/18","title":"GitHub Actionsのセルフホストランナーを試す","category":"プログラミング","tags":["github"]},"fields":{"slug":"/2021/10/github_actions_selfhosted/"}}}]},{"fieldValue":"go","edges":[{"node":{"id":"0fdd1587-d82d-56cb-9aa7-5e55ac85ef59","excerpt":"Goで作ったdotfiles管理ツールのdotzをビルド・バイナリ配布・homebrewのアップデートまでを自動化したメモ。 GitHub Actionsを初めて本格的に利用してみました。beta版の時はyamlにズラズラとshell scriptのように記述した覚えがありますが現行のactionsでは考え方が違うようです。 github actions 現行のGitHub actionsについては日本語文献もたくさんあるので詳しいことはそっちを見てほしいんですが、GitHub上ではworkflowがpushやPR、タイマーなどのトリガーによって実行されます。workflow内には任意のactionを持ちこのactionが順次/並列で実行されます。 actionにはdockerのようにinputと環境変数を渡すことができ、任意の数のoutputができます。outputは別のaction…","frontmatter":{"date":"04/06","title":"Goで作ったCLIツールのビルド・配布をGitHub Actionsで自動化する","category":"プログラミング","tags":["go","GitHub Actions","dotz"]},"fields":{"slug":"/2020/4/goで作ったCLIツールのビルド・配布をGitHub_Actionsで自動化する/"}}}]},{"fieldValue":"golang","edges":[{"node":{"id":"37cdaf92-64ba-5601-b0ae-034c019d2931","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]},"fields":{"slug":"/2019/09/dotz/"}}}]},{"fieldValue":"homebrew","edges":[{"node":{"id":"acd530df-6424-5a92-b742-8c15160bf3f3","excerpt":"昨日したらvirtualboxがアップデートできなかったので対応をメモ。 エラー文 VBoxUSBでエラーなので、類似事例を探すと以下のフォーラムが見つかった。\nhttps://forum.macbidouille.com/index.php?showtopic=420332 接続してるBluetoothデバイスを外すといいと書いてある。ほんとかよと思いながらも接続していたトラックパッドとマウスのBluetoothを設定からペアリング解除し接続しているUSBデバイスを全て外したのち、再起動し\nするとすんなりアップデートできた。 Bluetoothのペアリングをやり直して今回は対応終了。 最後に ザーッと検索したところ類似のエラーが起こっている人が少なかっので、自分が追加でインストールしているExtention Packに要因があるのかもしれないと思った。検証はしてないので予想。","frontmatter":{"date":"07/26","title":"virtualBoxをアップデートした","category":"プログラミング","tags":["homebrew"]},"fields":{"slug":"/2021/7/update-virtualbox/"}}},{"node":{"id":"23e97bdf-0746-56f5-8668-df620db0e88d","excerpt":"Cask に追加してみる homebrew を更新し、作業中は自動更新を止める まずで更新をかけておきます、これで Cask 含め brew 本体も更新されます。 次に、homebrew は Cask を自動更新する仕様なので作業中はこれを止めておきます。 環境変数なのでターミナルを開き直したあとや、別のターミナルには効きませんのでご注意を。 Cask に追加したいアプリケーションをインストールしておく 今までと同じようにブラウザでインストーラーなどをダウンロードし、インストールします。後々使うのでダウンロードしたファイルを消さないようにしましょう。 github 上でhomebrew-caskを fork する local 上の homebrew ディレクトリの git に fork したリポジトリを追加する Cask…","frontmatter":{"date":"08/20","title":"homebrew-caskにないアプリは自分で追加しよう","category":"プログラミング","tags":["homebrew"]},"fields":{"slug":"/2019/01/homebrew-cask-add/"}}}]},{"fieldValue":"lily58","edges":[{"node":{"id":"8cce7e55-237e-55ab-8596-4f79a64622cd","excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。 keymap.cにテンキーレイヤーを追加する レイヤー定義はに書き込みます。 レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lower…","frontmatter":{"date":"06/20","title":"Lily58にレイヤーを追加する","category":"プログラミング","tags":["lily58","自作キーボード"]},"fields":{"slug":"/2020/6/lily58-add-layer/"}}}]},{"fieldValue":"mac","edges":[{"node":{"id":"09391e34-8322-52a0-ae95-72291a05c76b","excerpt":"バッテリー残量を確認したい ついこないだやっとBig Surにアップデートをしました。アップデートしてから気がついたんですがBig Surはメニューバーにバッテリー残量の数値を出せなくなっていました。 アイコンの満ち欠けでなんとなくの残量はわかりますし、マウスでクリックすれば数値を確認することはできるのですが常時表示されていないとなんとなく不安です。 そこで以前利用していたBattery Monitorを入れてバッテリー残量が20%を下回ったら通知バナーを出すように設定していました。しかし最近導入した大きめのディスプレイで作業していると右上の通知バナーに気がつかず、「いきなり画面が消えた！」と思って本体の画面を見たら赤い電池マークが点滅していることが何度もあり、どうにかしたかった。 Cloud Batteryで出来ること 探すとCloud Battery…","frontmatter":{"date":"04/11","title":"Cloud Batteryでバッテリー残量を確認する","category":"日記","tags":["mac"]},"fields":{"slug":"/2021/4/cloudbattery/"}}},{"node":{"id":"3267aaf7-665f-514f-b060-523a8dc59238","excerpt":"今日ターミナルを起動すると と表示されるようになった。とりあえず perl を最新にしてみようと plenv をインストール\nhttps://github.com/tokuhirom/plenv#homebrew-on-mac-os-x\n公式の説明どうりに .bachrc に追記 最新版をダウンロード、インストール パッケージマネージャーもインストール(pip 的なやつ) そして local/lib.pm をインストール","frontmatter":{"date":"06/05","title":"macのターミナル起動時に怒られるようになった話","category":"プログラミング","tags":["mac"]},"fields":{"slug":"/macのターミナル起動時に怒られるようになった話/"}}},{"node":{"id":"48048e3e-84dc-5dbb-aec1-19320492769a","excerpt":"自分用のメモ記事なので、参考程度にどうぞ。 環境 MacBookAir macOS Sierra 10.12.2 homebrew 1.1.5 homebrew-cask 1.1.5 mas 1.3.1 mackup 0.8.15 準備編 １. 必要なファイルを外部のストレージにコピー home ディレクトリをそのままコピーしてしまえばある程度は安心 プッシュしていない Git プロジェクトはプロジェクトごとコピーしておけばブランチ構造ごとコピーできる VirtualBox のエクスポートツールでバックアップしてもいいし、面倒ならフォルダごとコピーして*.vbox ファイルをあとでインポートすれば OK ２. Dropbox をインストールし同期できるように設定しておく インストール済みならばそれで OK…","frontmatter":{"date":"12/30","title":"MBAのSerriaをクリーンインストールした時の手順メモ","category":"プログラミング","tags":["mac"]},"fields":{"slug":"/mbaのserriaをクリーンインストールした時の手順メモ/"}}}]},{"fieldValue":"macOS","edges":[{"node":{"id":"37cdaf92-64ba-5601-b0ae-034c019d2931","excerpt":"増税前にPCを買い換えておこうと思い、高校の時に買ったMacBook Air 13-inch Early 2015から2019 MacBook Pro 2019 13-inch 4thunderbolt3 portsにしました。 メモリとかSSDとかも追加して、この度念願のUSキーボードにしました。 初バタフライキーボードです、このペチペチ感が楽しいです。 さて、パソコンを買い換えたということは環境を再構築しなければなりません、大概のアプリケーションはhomebrewで管理しているのでインストール用のスクリプトを書いておけばいいですね。 あとは設定周りのファイルを移行したいです。正直dotfilesを管理するツールはいくらでもあります。前はhomeshick…","frontmatter":{"date":"09/20","title":"dotfilesを管理するツールを作った","category":"プログラミング","tags":["golang","dotz","macOS"]},"fields":{"slug":"/2019/09/dotz/"}}}]},{"fieldValue":"qmk firmware","edges":[{"node":{"id":"2272e49f-b90b-5fab-be2a-60e964c85bcf","excerpt":"キー入力が下手なのでバックスペースを連打しがちなのですがバックスペースキーはキーボード上では遥か右上にあります。これが原因で右手首を痛めたことも。入力精度を上げろという話なのですが出来るならもうしてます。 また、以外と日本語入力をしていると使いがちな「ー」伸ばし棒も近くに欲しいものです。 今回はにbackspace・にハイフンを割り当てます。 Ctrlキー Ctrlキー含め装飾キーには様々なキーバインドが割り当てられています。一般的にはにはreturn・にはbackspaceなど色々あります。zsh/bashなどのshellやターミナルのキーバインドに設定されていることが多いです。macではに行末まで削除があったりと気が利いています。 qmk firmwareではraise/lower…","frontmatter":{"date":"04/08","title":"qmk firmwareでctrlとの同時押しをカスタマイズする","category":"プログラミング","tags":["qmk firmware","自作キーボード"]},"fields":{"slug":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/"}}}]},{"fieldValue":"tmux","edges":[{"node":{"id":"262d84b4-aa04-572b-ae90-84cf1975e8ca","excerpt":"macOS(Mojave)でiterm2を使っています、emacsのテーマを設定していてunderlineが表示できなくて困りました。 emacsでは文字色や背景色のほか、文字の下線, 太字,  斜体, 取り消しなど色々な表記ができます。 自分の環境ではflycheckのerror, warningなどが下線付きの書式になるはずでした。 iterm2上で直接emacsを起動している時にはきちんと下線が表示されますが、tmuxセッション上でemacsを起動すると下線が表示されませんでした。 \n そもそもターミナル上でこのようにunderlineやboldなどの文字装飾を行う時はANSIエスケープシーケンスかなーと思ったんですが\niterm直接とtmux上で を表示させても正しく同じ表示になります、アレレ。  なのでemacsの設定が悪いのかと思って色々変えてみたんですが、結局はtmux…","frontmatter":{"date":"08/21","title":"tmux上のemacsで下線が表示されなかった話","category":"プログラミング","tags":["emacs","tmux"]},"fields":{"slug":"/2019/08/tmux-emacs-underline/"}}}]},{"fieldValue":"use-package","edges":[{"node":{"id":"d6b211e0-c14b-5f3e-a935-02c0ca104893","excerpt":"Emacsのパッケージマネージャーのuse-package.elにはパッケージインストールの他に任意のタイミングで評価させるキーワードというものがありますが、自分はこれをよく分からず使っているので調べてまとめます。 実行タイミング 評価の順番はこうなります パッケージ名の実在確認    パッケージをロード パッケージをロード  インストールするパッケージの設定を記述するためのキーワードです。 :preface 条件分岐キーワードを同時に使用していた時でも、条件分岐よりも先に評価されます。つまり、指定したパッケージ名が実在するならば真っ先に必ず評価してくれます。 :init パッケージが読み込まれる前に評価されます。遅延キーワードの影響を受けません。 :config 当該のパッケージが読み込まれた後に評価されます。initに比べ、config…","frontmatter":{"date":"12/02","title":"use-packageについてまとめる","category":"プログラミング","tags":["emacs","use-package"]},"fields":{"slug":"/2019/12/use-package/"}}}]},{"fieldValue":"youtube live","edges":[{"node":{"id":"9d5fb095-eb75-5bd9-987e-e660d3db77c6","excerpt":"感染防止などの理由でいつもは集まって行なっていたミーティングができなくなってしまったので、今回youtube liveでリアルタイム配信をやってみたレポートです。 使用した機材やつまづきポイントなどを書いておくので何かの助けになれば幸いです。 事の発端 大学のサークルにて月に一回所属している人を大教室に集めて情報共有などを行う習慣があり、2月までは大教室に付属するプロジェクターとマイクを用いて講義のような形式で行なっていた。しかし3月は感染防止の観点から大学側より集会禁止の通知が届いたため中止に。 この時期は大学のサークルということもあり新歓などで慌ただしく情報共有の場が必要でした。その他のことも忙しい時期らしい。なので予定していた日付はそのままで配信集会をやろうということになった。 配信準備   今回使用した機材は以下 ビデオミキサー V-1HD Roland PC…","frontmatter":{"date":"04/01","title":"youtube liveでネット配信をやったレポ","category":"日記","tags":["youtube live"]},"fields":{"slug":"/2020/4/ネット配信をやってみたレポ/"}}}]},{"fieldValue":"インターンシップ","edges":[{"node":{"id":"6650ba2e-a8dd-5b8f-8ea1-12d678b3be1d","excerpt":"Chatworkさんの2020年夏のインターンシップのフロントエンドコースに参加させていただきましたレポ。オンライン開催ということでどんな３週間になるのかと不安と期待でいっぱいでしたがとても楽しくたくさんのことを得られたと感じています。 この手のエントリーは守秘義務契約に違反してしまいそうで避けていたのですが、自分が実際にエントリーするときに過去の参加者のレポを参考しましたし、これも誰かの参考になればと思いレポします。 Chatworkさんのインターンシップ自体が2019年に初めて行われ、内容はバックエンド(Scala)のコースのみだったようです。２回目となる2020年には去年に引き続きバックエンドと合わせてフロントエンドコース(React.js…","frontmatter":{"date":"11/08","title":"2020夏Chatworkインターンに参加させて頂いたレポ","category":"日記","tags":["インターンシップ"]},"fields":{"slug":"/2020/11/intern_rep/"}}}]},{"fieldValue":"ブログ","edges":[{"node":{"id":"b32afd63-6ba9-5c8b-8021-26daf5ef748a","excerpt":"前は hatenablog を使っていたものの、自分でブログを構築したくなったので作ってみた。WordPress 等の CMS でやるにはメンテナンスが面倒なこともあって静的サイトジェネレータを使いました。一度 jekyll で作りましたが gatsbyjs を教えてもらってその表示速度に驚かされたのでこれはやるしかないと思い作りました。 gatsby.js は React ベースの静的サイトジェネレータです、つい最近 v2.0.0 になったばかりで公式のドキュメントにかきかけのところがあったりもしますが英語圏に情報が落ちているので大概のことはググればすぐに解決します。ただ日本語の情報が他のジェネレータ系に比べて少ないのでとっつきにくいと言われればそうなのですが最適化とか考えなくてもとりあえず作れば Gatsby…","frontmatter":{"date":"09/26","title":"ブログをgatsbyに移行した話","category":"日記","tags":["gatsby.js","ブログ"]},"fields":{"slug":"/2018/09/gatsbyに移行した話/"}}}]},{"fieldValue":"ポリッドスクリーン","edges":[{"node":{"id":"4ddddf8f-5df7-5a2c-9585-0c658559389c","excerpt":"イベントレポ。自分は途中から企画に参加した、今回はプロマネ兼システム構築としての参加でした。 ここでは照明・音響・映像周りのシステムについてのメモ 照明 今回の照明周りの機材  「前回よりも良いものを」ということで前回の反省を踏まえて今回挑戦したことです。 事前プログラミングによる照明の自動制御と照明と映像の同期 電飾を用いた立体的な演出 生バンド演奏によるライブ プロジェクター 2 台同時投影 事前プログラミングによる照明の自動制御と照明と映像の同期 第一回はパレータス SX で手動でオペして、ボーカロイド楽曲の速いテンポにオペレーターが付いて行けずいっぱいいっぱいだったので、2 回目は自動化を導入。2 回目では映像の再生ボタンと照明の再生ボタンをせーので押す方法で同期していた。今回 3 回目では 2 台のプロジェクターも含め…","frontmatter":{"date":"07/05","title":"ポリッドスクリーン系イベントのシステム周りの話","category":"舞台技術","tags":["ポリッドスクリーン"]},"fields":{"slug":"/ポリッドスクリーン系イベントのシステム周りの話/"}}},{"node":{"id":"918f15bf-642c-55d9-b7e6-ab97aebef309","excerpt":"イベント概要 非営利 自分も含め、企画側は全員学生、お客さんは学生と教員 イベントを行った場所は学校 使用キャラクターはクリプトンヒューチャー社の VOCALOID キャラクターのみ 準備 スクリーンについて スクリーンを選ぶポイント 安い 短辺が２メートル以上あるロール状のシート 無地 (フィルム表面に何も印字されていない) 学生でも買える 軽い 学校に搬入可能である を考え、今回利用したのがカインズホームの農ポリ 0.05X210X100 5000 円以下で購入でき、サイズも短辺が 2m10cm あり支払いもコンビニで OK、完全に無地で、ロールの状態で 9kg…","frontmatter":{"date":"08/04","title":"ポリッドスクリーンを使ったボカロ系イベントを作った話","category":"舞台技術","tags":["ポリッドスクリーン"]},"fields":{"slug":"/ポリッドスクリーンを使ったボカロ系イベントを作った話/"}}}]},{"fieldValue":"参加レポ","edges":[{"node":{"id":"a3675006-d9a8-5894-ad97-c96cb1161e21","excerpt":"イベントについて 先週Bug Shooting Challenge #5 ONLINEに参加させてただきました。 問題の背景としては、すでにリリースされているwebゲームのCREチームとして配属され、ユーザーからのお問い合わせや社内の調査チームからの報告を元にバグを探していくというものです。 お題のゲームはRailsで作られており、コードとdocker-compose.ymlが入ったgitリポジトリーを渡されます。さらに、サーバーのログがBigQueryに蓄積されているので、参考にできます。 問題は全3問あり、ペアでチームを組みそれぞれで問題に取り掛かります。ログを解析をした経験もBigQuery…","frontmatter":{"date":"12/24","title":"Bug Shooting Challenge #5 ONLINEに参加させていただきました","category":"日記","tags":["参加レポ"]},"fields":{"slug":"/2020/12/bug-shooting-challenge/"}}}]},{"fieldValue":"思ったこと","edges":[{"node":{"id":"b3ea69ec-62d9-5ff6-96ca-8f02d4621813","excerpt":"来年の後半あたりからキャッシュレス決済に補助金がつくとかつかないとか言われてますね。自分は 4 月大学に入ってから出来るだけ現金を使わない生活をしてきました。理由としては家計簿を自動化したかったからです。 高校生の頃はあまり買い物もしなかったので zaim というレシートの写真を撮ると自動で家計簿をつけてくれるサービスを使っていました。しかし大学生になり、なんとかクレジットカードを作れるようになったので PASMO のオートチャージ機能をつけてみました。これがかなり便利で改札を通過する時に設定額を下回っている場合は自動で入金をしてくれるというものです。つまり改札にタッチした時には。 Ferica…","frontmatter":{"date":"12/28","title":"キャッシュレス決済について思うこと","category":"日記","tags":["思ったこと","生産性のない話"]},"fields":{"slug":"/2018/12/kyash-less/"}}}]},{"fieldValue":"生産性のない話","edges":[{"node":{"id":"03b6901f-f735-5ceb-822e-ae82b899b811","excerpt":"こんにちは、あっという間に１２月です。もういくつか寝るとお正月になります。アドベントカレンダーの時期なので毎日はつらいですができるだけたくさんの記事を書いていけたらなと思います。 そんなことで今月1つ目の記事は「今年買ってよかったもの」です。いつにも増しておうちで過ごす時間が長かった今年ですが少しでもお家を快適に過ごそうといろいろなものを買っていました。そんなものの一部を紹介 買ってよかったもの DJスタンド 自作キーボード Lily58 Jabra Talk25 TEPRA Pro クッションメーカー DJスタンド https://www.soundhouse.co.jp/products/detail/item/56833/ ずっと家にいるので必然的にPCを見続けている時間が増えました。今メインで使っているのは去年買ったMacBookProなのでPC…","frontmatter":{"date":"12/08","title":"2020買ってよかったもの","category":"日記","tags":["生産性のない話"]},"fields":{"slug":"/2020/12/good2buy/"}}},{"node":{"id":"b3ea69ec-62d9-5ff6-96ca-8f02d4621813","excerpt":"来年の後半あたりからキャッシュレス決済に補助金がつくとかつかないとか言われてますね。自分は 4 月大学に入ってから出来るだけ現金を使わない生活をしてきました。理由としては家計簿を自動化したかったからです。 高校生の頃はあまり買い物もしなかったので zaim というレシートの写真を撮ると自動で家計簿をつけてくれるサービスを使っていました。しかし大学生になり、なんとかクレジットカードを作れるようになったので PASMO のオートチャージ機能をつけてみました。これがかなり便利で改札を通過する時に設定額を下回っている場合は自動で入金をしてくれるというものです。つまり改札にタッチした時には。 Ferica…","frontmatter":{"date":"12/28","title":"キャッシュレス決済について思うこと","category":"日記","tags":["思ったこと","生産性のない話"]},"fields":{"slug":"/2018/12/kyash-less/"}}}]},{"fieldValue":"自作キーボード","edges":[{"node":{"id":"8cce7e55-237e-55ab-8596-4f79a64622cd","excerpt":"自分は Lily58 Pro という左右分割の自作キーボードを使っています。ErgoDoxよりは小さくCorneよりは大きいのでとても自分に合っています。 Lily58のデフォルトFWにはRaise/Lower/Adjustの3レイヤーが定義されていますが、最近会計処理を多くやることになってテンキーが欲しくなったので追加しようと思います。Lily58にはオプションとしてOLEDがつきます、デフォルトでレイヤー名やキー入力の履歴を表示してくれる親切設計でした。 keymap.cにテンキーレイヤーを追加する レイヤー定義はに書き込みます。 レイヤーの切り替え方は何通りかあります、デフォルトのRaise/Lower…","frontmatter":{"date":"06/20","title":"Lily58にレイヤーを追加する","category":"プログラミング","tags":["lily58","自作キーボード"]},"fields":{"slug":"/2020/6/lily58-add-layer/"}}},{"node":{"id":"2272e49f-b90b-5fab-be2a-60e964c85bcf","excerpt":"キー入力が下手なのでバックスペースを連打しがちなのですがバックスペースキーはキーボード上では遥か右上にあります。これが原因で右手首を痛めたことも。入力精度を上げろという話なのですが出来るならもうしてます。 また、以外と日本語入力をしていると使いがちな「ー」伸ばし棒も近くに欲しいものです。 今回はにbackspace・にハイフンを割り当てます。 Ctrlキー Ctrlキー含め装飾キーには様々なキーバインドが割り当てられています。一般的にはにはreturn・にはbackspaceなど色々あります。zsh/bashなどのshellやターミナルのキーバインドに設定されていることが多いです。macではに行末まで削除があったりと気が利いています。 qmk firmwareではraise/lower…","frontmatter":{"date":"04/08","title":"qmk firmwareでctrlとの同時押しをカスタマイズする","category":"プログラミング","tags":["qmk firmware","自作キーボード"]},"fields":{"slug":"/2020/4/qmk_firmwareでctrlとの同時押しをカスタマイズする/"}}}]},{"fieldValue":"読書","edges":[{"node":{"id":"5c0664b6-feaa-50cc-9938-26a4eb6e14ed","excerpt":"本を読んで誰かにおすすめしたくなったのに、いざ人に会うと本の名前を思い出せなくて困るのでここにメモしていきます。 Atomic Design: 堅牢で使いやすいUIを効率良く設計する https://www.amazon.co.jp/dp/477419705X 小さいところから段々と大きく考えていくAtomic Designの概念の説明に加えて、汎用性のあるコンポーネントの書き方などのサンプルコードがたくさん。 発行年が2018年だからかStorybookのサンプルコードがほとんどビルドできないので自力でちょっと直す必要があるかも。 今まではページの共通部分を切り出してコンポーネントにするぐらいにしか考えていなかったので、UI…","frontmatter":{"date":"07/18","title":"最近読んだ本","category":"日記","tags":["読書"]},"fields":{"slug":"/2021/7/book/"}}}]}]}},"staticQueryHashes":["1324386404","4172131656","848935343"]}