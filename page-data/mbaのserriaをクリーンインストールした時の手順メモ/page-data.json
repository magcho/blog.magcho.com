{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/mbaのserriaをクリーンインストールした時の手順メモ/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"48048e3e-84dc-5dbb-aec1-19320492769a","excerpt":"自分用のメモ記事なので、参考程度にどうぞ。 環境 MacBookAir macOS Sierra 10.12.2 homebrew 1.1.5 homebrew-cask 1.1.5 mas 1.3.1 mackup 0.8.1…","html":"<p><strong>自分用のメモ記事なので、参考程度にどうぞ。</strong></p>\n<h2>環境</h2>\n<ul>\n<li>MacBookAir macOS Sierra 10.12.2</li>\n<li>homebrew 1.1.5</li>\n<li>homebrew-cask 1.1.5</li>\n<li>mas 1.3.1</li>\n<li>mackup 0.8.15</li>\n</ul>\n<h2>準備編</h2>\n<p>１. 必要なファイルを外部のストレージにコピー</p>\n<ul>\n<li>home ディレクトリをそのままコピーしてしまえばある程度は安心</li>\n<li>プッシュしていない Git プロジェクトはプロジェクトごとコピーしておけばブランチ構造ごとコピーできる</li>\n<li>VirtualBox のエクスポートツールでバックアップしてもいいし、面倒ならフォルダごとコピーして*.vbox ファイルをあとでインポートすれば OK</li>\n</ul>\n<p>２. Dropbox をインストールし同期できるように設定しておく</p>\n<ul>\n<li>インストール済みならばそれで OK</li>\n</ul>\n<p>３. アプリの設定ファイルなどをバックアップ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install mackup\n$ mackup backup</code></pre></div>\n<ul>\n<li>エクスポートしたファイル群は Dropbox の共有フォルダにあるので、同期しておく</li>\n<li>/Users/{ユーザー名}/Dropbox/Mackup が作られる</li>\n</ul>\n<p>４. homebrwe, homebrew cask でコマンドでインストールしたアプリの一覧を取得する</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd ~/Dropbox/mac_backup\n$ brew list >> brew_list.txt\n$ brew cask list >> brew_cask_list.txt</code></pre></div>\n<ul>\n<li>Docker は別で再インストールしたほうがいい(Docker tool box)</li>\n</ul>\n<p>５. AppStore でからインストールしたアプリの一覧を取得する</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd ~/Dropbox/mac_backup\n$ brew install mas\n$ mas list >> mas_list.txt</code></pre></div>\n<p>６. インストール一覧からシェルスクリプトを作る</p>\n<p>{% gist 5023c8d38d325b6578112807c1fd46b2 %}</p>\n<p><a href=\"https://gist.github.com/5023c8d38d325b6578112807c1fd46b2\">mac を引っ越す時にアプリを一括インストールするスクリプト</a></p>\n<h2>リストア編</h2>\n<p>１. xcode を appstore からインストール</p>\n<p>２. xcode を起動し xcode comand line tool をインストール</p>\n<p>３. Homebrew をインストール</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</code></pre></div>\n<p>４. 1password をインストールする</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew cask install 1passwrod</code></pre></div>\n<ul>\n<li><strong>cask は[brew cask]とコマンドを打つと気を利かせて homebrew がインストールしてくれるので、自分でやる必要はない</strong></li>\n<li>自分は iPhone とも同期しているので icloud 同期で設定</li>\n</ul>\n<p>５. Dropbox をインストールしファイルを同期する</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew cask install dropbox</code></pre></div>\n<p>６. mackup をインストールし、復元</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install mackup\n$ mackup restore</code></pre></div>\n<p>７. 準備編(上記)で作ったシェルスクリプトを実行して brew と cask 系を一括インストール</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /Users/{ユーザー名}/Dropbox/mac_backup\n$ sudo sh brew-install-list.sh</code></pre></div>\n<p>８. atom エディタのアドオンと設定を復元</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ apm install atom-settings\n[atom内のコマンドで（cmd+shift+p)] -> [sync-settings:restore]とタイプしEnter</code></pre></div>\n<ul>\n<li>apm コマンドが使えない場合は一度 atom を起動し [Atom] -> [Install Shell Commands]を押し apm が使えるようにする。</li>\n<li>復元中に、gist のリストとパッケージの最新バージョンが違ったりすると警告が出るので、各自判断で手動ならインストールできます。</li>\n<li>Settings > Packages を見ると atom の再起動が必要なパッケージはダウンロードされた時点で一時停止しているので、インストールを押してやれば OK です。</li>\n</ul>\n<p>９. Git 系のセットアップ</p>\n<ul>\n<li>git は sourcetree 内蔵ではなく、自分で入れたものを使っているので brew でインストール後 Sourcetree の設定でシステムの Git に切り替えます</li>\n<li>Github と Bitbucket でログインする。２段階認証にどちらも対応してるのでアクセストークンをあれこれする必要はなく、ID と PW でログインして、携帯などで 6 桁の数字を確認して２段階認証しておきましょう</li>\n<li>Ouath か Basic で認証したり SSH キーを認証したりしておく。</li>\n</ul>\n<h2>後記</h2>\n<p>アプリのインストール管理は brew-file とやらでできるらしいので、もっと早く知りたかった。それと、1password って appstore からだと 7,800 円するけど、cask なら試用版をメール認証なしでインストールできるっていう発見。</p>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/mbaのserriaをクリーンインストールした時の手順メモ.md","frontmatter":{"title":"MBAのSerriaをクリーンインストールした時の手順メモ","tags":["mac"],"category":"プログラミング","fullDate":"2016-12-30"},"fields":{"lastFileUpdatedAt":"2022-09-21","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/mbaのserriaをクリーンインストールした時の手順メモ/","previous":{"excerpt":"状況説明 かなり前から homebrew cask を使うと。 こんなのが出てきていた。「cask のバージョンアップでアプリが配置されるディレクトリの場所が変わったから前の場所に置いてたアプリ新しいとこに移動してくれ」っていう話だった気がする、筆者は面倒だから移動しなくても使えるからやっていなかったが、docker がうまくインストールできないので今更対応した。\nやることは簡単、コンソールに書いてあるURLに書いている通りに進めるだけだが、しかし今回 Thunderbird…","fields":{"slug":"/homebrew-caskで特定のアプリがインストールできなくなった話/"},"frontmatter":{"date":"12/03","title":"Homebrew Caskで特定のアプリがインストールできなくなった話","category":"プログラミング","tags":["Homebrew"]}},"next":{"excerpt":"DMX512-A 仕様 シールド付きツイストペアケーブルを使用すること RS-485 では 1500m までの通信が保証されているが、RS-485 の仕様の中でケーブルの長さを伸ばすと通信速度が下がるとされているので、DMX512-A の通信速度 250kbps が保証されるのはケーブル長 400m までとされている。 RS-485 の仕様では 1Master で 32Slave までとされている DMX512-A のボーレートは 250kpbs なので、1bit あたり 4μsec (※1)a 端末にはターミネータ(終端抵抗)をつける DMX512-A では基本的に 120Ω となっている(100-120)と幅を効かせて定義もされている。 仕様上では１パケット長が最小で 22.7msec になり、リフレッシュレートは最大で 44Hz になる ※1: 仕様では基本 250kbps…","fields":{"slug":"/dmx512のプロトコルをまとめる/"},"frontmatter":{"date":"01/03","title":"DMX512のプロトコルをまとめる","category":"舞台技術","tags":["DMX512"]}}}},"staticQueryHashes":["1324386404","4172131656","848935343"]}