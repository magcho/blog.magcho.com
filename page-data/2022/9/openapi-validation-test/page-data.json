{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2022/9/openapi-validation-test/","result":{"data":{"site":{"siteMetadata":{"title":"magcho's blog","author":"magcho"}},"markdownRemark":{"id":"bc9863d9-401f-5427-842a-1c1a6d754d09","excerpt":"スタート当初はOpenAPIが存在せず、仕様を整理する目的で後からOpenAPIが追加されたプロジェクトがありました。OpenAPIの仕様を満たせているかは人力でレビューするのみでありスキーマを定義した旨味がないなーと思っていたので後からOpenAPI…","html":"<p>スタート当初はOpenAPIが存在せず、仕様を整理する目的で後からOpenAPIが追加されたプロジェクトがありました。OpenAPIの仕様を満たせているかは人力でレビューするのみでありスキーマを定義した旨味がないなーと思っていたので後からOpenAPIを追加した場合でも仕様を満たせていることを担保できる仕組みを整備しました。</p>\n<p>SwaggerもといOpenAPIはAPIの定義ファイルから <a href=\"https://github.com/OpenAPITools/openapi-generator-cli\">openapi-generator-cli</a> などを利用して定義通りのリクエストであることを担保できます。しかしこの方法はプロジェクト立ち上げ時の既存コードがない状態ではいいですが、既存のコードがあるとこの自動生成コードに置き換える必要があり大変です。</p>\n<p>既存コードではAxiosでリクエストを行いJestの単体テストを行う環境が整備されていたのでここに乗っかる形で自動テスト時にOpenAPIの仕様を満たせているかを担保したいと思います。</p>\n<h2>Axiosはリクエスト直前に処理を追加できる</h2>\n<p>Aixosには<a href=\"https://axios-http.com/docs/interceptors\">Interceptors</a>というリクエストとレスポンスの直前・直後のそれぞれに処理を追加できる機構が存在します</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> Axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// リクエスト直前のここでOpenAPIの定義通りのリクエストになっているかを判定する</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>テスト時のみリクエスト直前でOpenAPIの定義通りになっているかを判定するようにしておき、この場所でOepnAPIのvalidationを行なっていきます。</p>\n<h2>AxiosのリクエストがOpenAPIの定義通りかでvalitionチェックする</h2>\n<p>Validationには<a href=\"https://www.npmjs.com/package/openapi-request-validator\">openapi-request-validator</a>を利用します。このライブラリだけではOpenAPIのyamlファイルが読めないので別途<a href=\"https://www.npmjs.com/package/@apidevtools/swagger-parser\">@apidevtools/swagger-parser</a>を用います。</p>\n<p>これらのライブラリを用いてテストするとこのようになります</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> swaggerParser <span class=\"token keyword\">from</span> <span class=\"token string\">'@apidevtools/swagger-parser'</span>\n<span class=\"token keyword\">import</span> OpenAPIRequestValidator <span class=\"token keyword\">from</span> <span class=\"token string\">'openapi-request-validator'</span>\n\n<span class=\"token keyword\">const</span> testRequset <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">token xxxxxxxxxxxxxxxxxxxxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    hoge<span class=\"token operator\">:</span> <span class=\"token string\">'huga'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">OPEN_API_FILE_PATH</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/openapi.yml'</span>\n\n<span class=\"token keyword\">const</span> openapi <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> swaggerParser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">OPEN_API_FILE_PATH</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 今回リクエストする定義を取り出す</span>\n<span class=\"token keyword\">const</span> requestUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/sample'</span>\n<span class=\"token keyword\">const</span> requestMethod <span class=\"token operator\">=</span> <span class=\"token string\">'get'</span>\n<span class=\"token keyword\">const</span> requestBodyDefinition <span class=\"token operator\">=</span> openapi<span class=\"token punctuation\">.</span>paths<span class=\"token punctuation\">[</span>requestUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>requestMethod<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>requestBody\n\n<span class=\"token comment\">// 取り出した定義でvalidatorを作る</span>\n<span class=\"token keyword\">const</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenAPIRequestValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> requestBody<span class=\"token operator\">:</span> requestBodyDefinition <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// リクエストが定義に一致するか確認する</span>\n<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validateRequest</span><span class=\"token punctuation\">(</span>testRequset<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 定義通りで問題がない時</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 定義とは異なるリクエストを送ろうとしている時</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>validatorを作るときにファイル全体ではなく検査対象のリクエスト定義のみに絞って引数に与える必要があります。</p>\n<h2>Axiosのintersepter内でvalidationする</h2>\n<p>上記の２つを組み合わせると</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> AxiosRequestConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> swaggerParser <span class=\"token keyword\">from</span> <span class=\"token string\">'@apidevtools/swagger-parser'</span>\n<span class=\"token keyword\">import</span> OpenAPIRequestValidator <span class=\"token keyword\">from</span> <span class=\"token string\">'openapi-request-validator'</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createAxiosInstanceWithRequestValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">OPEN_API_FILE_PATH</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/openapi.yml'</span>\n  <span class=\"token keyword\">const</span> openapi <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> swaggerParser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">OPEN_API_FILE_PATH</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> Axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> requestBodyDefinition <span class=\"token operator\">=</span> openapi<span class=\"token punctuation\">.</span>paths<span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>requestBody\n\n    <span class=\"token keyword\">const</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenAPIRequestValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> requestBody<span class=\"token operator\">:</span> requestBodyDefinition <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validateRequest</span><span class=\"token punctuation\">(</span>testRequset<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> signal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      signal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isValid<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      signal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isValid<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>errors <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> signal\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> axios\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jestで検査している都合上エラーではなくテスト内部からJestにテスト結果を伝えるためにthrowで大域脱出しています</p>\n<p>そして実際にJestで扱うためにSignalをいい感じに受け取ってJestに渡してくれる以下のようなヘルパーを用意して</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validationHelper</span><span class=\"token punctuation\">(</span>handler<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>unkown<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// リクエストのバリデーション結果は大域脱出でthrowされてくるのでキャッチする</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> handler\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signal <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 通常のエラーであれば再度エラーを投げ直す</span>\n      <span class=\"token keyword\">throw</span> signal\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> validateRequestResult <span class=\"token operator\">=</span> signal <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span> isValid<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> errors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validateRequestResult<span class=\"token punctuation\">.</span>isValid <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'リクエストがOpenAPIの定義通りではありません'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// リクエストが定義通りに行われた場合はTrueを返す</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>そして実際のテストは</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'リクエストが定義通りかどうかのテスト'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hogeへのgetリクエストはOpenAPIの定義通りである'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createAxiosInstanceWithRequestValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> requestHandler <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hoge'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">validationHelper</span><span class=\"token punctuation\">(</span>requestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このように検査できます。これでめでたくリクエストが定義通りでない場合はvalidationHelperがエラーを投げるのでJestでfaliするようになりました。</p>\n<h2>最後に</h2>\n<p>スキーマーファーストではないものの、Axiosのintersepterを用いてテストすることで既存のAxiosの実装コードに手を加えることなくテストコードのみの追加で既存のリクエスト部分をテスト時にvalidationすることができました。</p>\n<p>私はテスト時のみこの確認を行なっていますが本番時にもvalidationしたければ同様にintersepterをして、今回のhelperにあたる部分を用意するだけの２点の変更で実現できると思います。</p>","fileAbsolutePath":"/home/runner/work/blog.magcho.com/blog.magcho.com/src/pages/2022/9/openapi-validation-test.md","frontmatter":{"title":"既存プロジェクトに後からopenapiを追加してAxiosのリクエストをJestでテストしたい","tags":["Jest"],"category":"プログラミング","fullDate":"2022-09-19"},"fields":{"lastFileUpdatedAt":"2022-09-17","fileRevisionCount":"1"}},"allMarkdownRemark":{"group":[{"fieldValue":"3D_printer"},{"fieldValue":"AWS"},{"fieldValue":"Apple Watch"},{"fieldValue":"Arduino"},{"fieldValue":"Art-Net"},{"fieldValue":"Chrome"},{"fieldValue":"DMX512"},{"fieldValue":"Docker"},{"fieldValue":"GitHub Actions"},{"fieldValue":"Gulp"},{"fieldValue":"Homebrew"},{"fieldValue":"Jest"},{"fieldValue":"M5Paper"},{"fieldValue":"Netlify"},{"fieldValue":"Nginx"},{"fieldValue":"OLA"},{"fieldValue":"OSS"},{"fieldValue":"SOAP"},{"fieldValue":"TypeScript"},{"fieldValue":"dotz"},{"fieldValue":"emacs"},{"fieldValue":"gatsby.js"},{"fieldValue":"git"},{"fieldValue":"github"},{"fieldValue":"go"},{"fieldValue":"golang"},{"fieldValue":"homebrew"},{"fieldValue":"lily58"},{"fieldValue":"mac"},{"fieldValue":"macOS"},{"fieldValue":"qmk firmware"},{"fieldValue":"tmux"},{"fieldValue":"use-package"},{"fieldValue":"youtube live"},{"fieldValue":"インターンシップ"},{"fieldValue":"ブログ"},{"fieldValue":"ポリッドスクリーン"},{"fieldValue":"参加レポ"},{"fieldValue":"思ったこと"},{"fieldValue":"生産性のない話"},{"fieldValue":"自作キーボード"},{"fieldValue":"読書"}]}},"pageContext":{"slug":"/2022/9/openapi-validation-test/","previous":{"excerpt":"M5Paperの出荷時に書き込まれているファームウェアーをベースに機能を追加してみようと思い初期ファームウェアをvscode(platform.io)で開いたもののビルドできない&書き込めなくて困ったので解決方法をメモ 環境 MacOS Monterey ビルドエラー 初期ファームウェアのコード m5stack/M5Paper_FactoryTest  をクローンし、vscodeで開いた後、ビルドをするとエラーで完了しない。 おそらくこのコードが書かれた以後、i2c…","fields":{"slug":"/2022/5/m5_paper/"},"frontmatter":{"date":"05/08","title":"M5Paper V1.1にPlatform.ioから書き込みをする","category":"電子工作","tags":["M5Paper"]}},"next":null}},"staticQueryHashes":["1324386404","4172131656","848935343"]}